// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModulesApp.Data;

#nullable disable

namespace ModulesApp.Migrations
{
    [DbContext(typeof(SQLiteDbContext))]
    [Migration("20250805031732_mig1")]
    partial class mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ModulesApp.Models.BackgroundServices.DbBackgroundService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConfigurationData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BackgroundService");
                });

            modelBuilder.Entity("ModulesApp.Models.Dasboards.DbDashboard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IconString")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Dashboard");
                });

            modelBuilder.Entity("ModulesApp.Models.Dasboards.DbDashboardEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("DashboardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("ParentEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.HasIndex("ParentEntityId");

                    b.ToTable("DashBoardEntity");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ModulesApp.Models.DbAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BackgroundServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("ModuleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundServiceId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("ModulesApp.Models.DbModule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Chip")
                        .HasColumnType("TEXT");

                    b.Property<int>("CommInterval")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirmwareVersion")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FlashSize")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FreeHeap")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IDFVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastResponse")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProgramName")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProgramStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProgramVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("WifiPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("WifiSsid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("ModulesApp.Models.ModulesPrograms.DbModuleFirmware", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdfVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ModuleFirmware");
                });

            modelBuilder.Entity("ModulesApp.Models.ModulesPrograms.DbModuleProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("FirmwareId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FirmwareId");

                    b.ToTable("ModuleProgram");
                });

            modelBuilder.Entity("ModulesApp.Models.ModulesPrograms.DbModuleProgramFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("ProgramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("ModuleProgramFile");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.DbTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BackgroundServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DashboardEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IntervalSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastRun")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ModuleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TriggerSourceType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundServiceId");

                    b.HasIndex("DashboardEntityId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.DbTaskLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SourceDataType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SourceInput")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SourceNodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SourcePositionAlignment")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetDataType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TargetInput")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TargetNodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetPositionAlignment")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SourceNodeId");

                    b.HasIndex("TargetNodeId");

                    b.ToTable("TaskLink");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.DbTaskNode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BoolVal1")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BoolVal2")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DoubleVal1")
                        .HasColumnType("REAL");

                    b.Property<double>("DoubleVal2")
                        .HasColumnType("REAL");

                    b.Property<int>("InputType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LongVal1")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LongVal2")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LongVal3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PositionX")
                        .HasColumnType("REAL");

                    b.Property<double>("PositionY")
                        .HasColumnType("REAL");

                    b.Property<string>("StringVal1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StringVal2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StringVal3")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SubType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ModulesApp.Models.Dasboards.Entities.DbButtonEntity", b =>
                {
                    b.HasBaseType("ModulesApp.Models.Dasboards.DbDashboardEntity");

                    b.ToTable("DashBoardEntity");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("ModulesApp.Models.Dasboards.Entities.DbDataListEntity", b =>
                {
                    b.HasBaseType("ModulesApp.Models.Dasboards.DbDashboardEntity");

                    b.ToTable("DashBoardEntity");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("ModulesApp.Models.Dasboards.Entities.DbFrameEntity", b =>
                {
                    b.HasBaseType("ModulesApp.Models.Dasboards.DbDashboardEntity");

                    b.ToTable("DashBoardEntity");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("ModulesApp.Models.Dasboards.Entities.DbKeyValueEntity", b =>
                {
                    b.HasBaseType("ModulesApp.Models.Dasboards.DbDashboardEntity");

                    b.ToTable("DashBoardEntity");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("ModulesApp.Models.Dasboards.Entities.DbLineChartEntity", b =>
                {
                    b.HasBaseType("ModulesApp.Models.Dasboards.DbDashboardEntity");

                    b.ToTable("DashBoardEntity");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("ModulesApp.Models.Dasboards.Entities.DbSwitchEntity", b =>
                {
                    b.HasBaseType("ModulesApp.Models.Dasboards.DbDashboardEntity");

                    b.ToTable("DashBoardEntity");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ModulesApp.Models.Dasboards.Entities.DbTemperaturesListEntity", b =>
                {
                    b.HasBaseType("ModulesApp.Models.Dasboards.DbDashboardEntity");

                    b.ToTable("DashBoardEntity");

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("ModulesApp.Models.Dasboards.Entities.DbValueSetterEntity", b =>
                {
                    b.HasBaseType("ModulesApp.Models.Dasboards.DbDashboardEntity");

                    b.ToTable("DashBoardEntity");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbArithmeticOperationNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbArithmeticSaturationNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue(11);
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbArrayOperationNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbBooleanOperationNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue(10);
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbBranchNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue(12);
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbConditionNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbConvertToNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbDataDisplayNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbDateTimeNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue(8);
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbFromAnyNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue(9);
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbFromMessageNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbSendMessageNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbValueNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModulesApp.Models.Dasboards.DbDashboardEntity", b =>
                {
                    b.HasOne("ModulesApp.Models.Dasboards.DbDashboard", "Dashboard")
                        .WithMany("Entities")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModulesApp.Models.Dasboards.DbDashboardEntity", null)
                        .WithMany("ChildEntities")
                        .HasForeignKey("ParentEntityId");

                    b.Navigation("Dashboard");
                });

            modelBuilder.Entity("ModulesApp.Models.DbAction", b =>
                {
                    b.HasOne("ModulesApp.Models.BackgroundServices.DbBackgroundService", "BackgroundService")
                        .WithMany("Actions")
                        .HasForeignKey("BackgroundServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ModulesApp.Models.DbModule", "Module")
                        .WithMany("Actions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BackgroundService");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ModulesApp.Models.ModulesPrograms.DbModuleProgram", b =>
                {
                    b.HasOne("ModulesApp.Models.ModulesPrograms.DbModuleFirmware", "Firmware")
                        .WithMany()
                        .HasForeignKey("FirmwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Firmware");
                });

            modelBuilder.Entity("ModulesApp.Models.ModulesPrograms.DbModuleProgramFile", b =>
                {
                    b.HasOne("ModulesApp.Models.ModulesPrograms.DbModuleProgram", "Program")
                        .WithMany("Files")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.DbTask", b =>
                {
                    b.HasOne("ModulesApp.Models.BackgroundServices.DbBackgroundService", "BackgroundService")
                        .WithMany("ServerTasks")
                        .HasForeignKey("BackgroundServiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ModulesApp.Models.Dasboards.DbDashboardEntity", "DashboardEntity")
                        .WithMany("ServerTasks")
                        .HasForeignKey("DashboardEntityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ModulesApp.Models.DbModule", "Module")
                        .WithMany("ServerTasks")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BackgroundService");

                    b.Navigation("DashboardEntity");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.DbTaskLink", b =>
                {
                    b.HasOne("ModulesApp.Models.ServerTasks.DbTaskNode", "Source")
                        .WithMany("SourceLinks")
                        .HasForeignKey("SourceNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModulesApp.Models.ServerTasks.DbTaskNode", "Target")
                        .WithMany("TargetLinks")
                        .HasForeignKey("TargetNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.DbTaskNode", b =>
                {
                    b.HasOne("ModulesApp.Models.ServerTasks.DbTask", "Task")
                        .WithMany("Nodes")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ModulesApp.Models.BackgroundServices.DbBackgroundService", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("ServerTasks");
                });

            modelBuilder.Entity("ModulesApp.Models.Dasboards.DbDashboard", b =>
                {
                    b.Navigation("Entities");
                });

            modelBuilder.Entity("ModulesApp.Models.Dasboards.DbDashboardEntity", b =>
                {
                    b.Navigation("ChildEntities");

                    b.Navigation("ServerTasks");
                });

            modelBuilder.Entity("ModulesApp.Models.DbModule", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("ServerTasks");
                });

            modelBuilder.Entity("ModulesApp.Models.ModulesPrograms.DbModuleProgram", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.DbTask", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.DbTaskNode", b =>
                {
                    b.Navigation("SourceLinks");

                    b.Navigation("TargetLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
