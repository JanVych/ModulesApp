// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModulesApp.Data;

#nullable disable

namespace ModulesApp.Migrations
{
    [DbContext(typeof(SQLiteDb))]
    [Migration("20250223001624_Init2")]
    partial class Init2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.13");

            modelBuilder.Entity("ModulesApp.Models.BackgroundService.DbBackgroundService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Interval")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastRun")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BackgroundService");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ModulesApp.Models.DashBoardCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("DashboardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("DashBoardCard");
                });

            modelBuilder.Entity("ModulesApp.Models.Dashboard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IconString")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Dashboard");
                });

            modelBuilder.Entity("ModulesApp.Models.Module", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Chip")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirmwareVersion")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FlashSize")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FreeHeap")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IDFVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastResponse")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProgramName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProgramVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("WifiCurrent")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("ModulesApp.Models.ModuleAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("ModuleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleAction");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.DbTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IntervalSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastRun")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ModuleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.DbTaskLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SourceData")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SourceInput")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SourceNodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SourceOrder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TargetData")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TargetInput")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TargetNodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SourceNodeId");

                    b.HasIndex("TargetNodeId");

                    b.ToTable("TaskLink");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.DbTaskNode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BoolVal1")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DoubleVal1")
                        .HasColumnType("REAL");

                    b.Property<int>("InputType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LongVal1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NodeType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PositionX")
                        .HasColumnType("REAL");

                    b.Property<double>("PositionY")
                        .HasColumnType("REAL");

                    b.Property<string>("StringVal1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StringVal2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StringVal3")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SubType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator<string>("NodeType").HasValue("DbTaskNode");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ModulesApp.Models.BackgroundService.Services.GoodweBackgroundService", b =>
                {
                    b.HasBaseType("ModulesApp.Models.BackgroundService.DbBackgroundService");

                    b.ToTable("BackgroundService");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbConditionNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue("Condition");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbDataDisplayNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue("DataDisplay");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbFromMessageNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue("FromMessage");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbSendMessageNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue("SendMessage");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.Nodes.DbValueNode", b =>
                {
                    b.HasBaseType("ModulesApp.Models.ServerTasks.DbTaskNode");

                    b.ToTable("TaskNode");

                    b.HasDiscriminator().HasValue("StaticData");
                });

            modelBuilder.Entity("ModulesApp.Models.DashBoardCard", b =>
                {
                    b.HasOne("ModulesApp.Models.Dashboard", "Dashboard")
                        .WithMany("Cards")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dashboard");
                });

            modelBuilder.Entity("ModulesApp.Models.ModuleAction", b =>
                {
                    b.HasOne("ModulesApp.Models.Module", "Module")
                        .WithMany("ModuleActions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.DbTask", b =>
                {
                    b.HasOne("ModulesApp.Models.Module", "Module")
                        .WithMany("ServerTasks")
                        .HasForeignKey("ModuleId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.DbTaskLink", b =>
                {
                    b.HasOne("ModulesApp.Models.ServerTasks.DbTaskNode", "Source")
                        .WithMany("SourceLinks")
                        .HasForeignKey("SourceNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModulesApp.Models.ServerTasks.DbTaskNode", "Target")
                        .WithMany("TargetLinks")
                        .HasForeignKey("TargetNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.DbTaskNode", b =>
                {
                    b.HasOne("ModulesApp.Models.ServerTasks.DbTask", "Task")
                        .WithMany("Nodes")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ModulesApp.Models.Dashboard", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("ModulesApp.Models.Module", b =>
                {
                    b.Navigation("ModuleActions");

                    b.Navigation("ServerTasks");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.DbTask", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("ModulesApp.Models.ServerTasks.DbTaskNode", b =>
                {
                    b.Navigation("SourceLinks");

                    b.Navigation("TargetLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
