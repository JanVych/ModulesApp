@inject SignInManager<IdentityUser> _signInManager
@inject NavigationManager _navigationManager

@page "/account/login"

<PageTitle>Log in</PageTitle>

<MudStack AlignItems="AlignItems.Center" Class="pt-4">

    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />

        <MudStack AlignItems="AlignItems.Stretch" Spacing="4" Style="min-width:350px">
            <MudText Typo="Typo.h3" GutterBottom="true">Log in</MudText>
            @* <MudText GutterBottom="true" Typo="Typo.body1">Use a local account to log in.</MudText> *@

            <MudStaticTextField For="@(() => Input.Username)" @bind-Value="Input.Username"
                                Label="User name" Placeholder="Username"
                                UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } })" />
            <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                Label="Password" InputType="InputType.Password" Placeholder="password"
                                UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } })" />
            <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">Remember me</MudStaticCheckBox>
            <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Log in</MudStaticButton>

            <MudText Color="Color.Error" Typo="Typo.body2">
                @_errorMessage
            </MudText>

        </MudStack>
    </EditForm>

    
</MudStack>

@*         <MudLink Href="Account/ForgotPassword">Forgot your password?</MudLink><br /> *@
@*         <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</MudLink><br /> *@
@*         <MudLink Href="Account/ResendEmailConfirmation">Resend email confirmation</MudLink> *@

@code {
    private string? _errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync();
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await _signInManager.PasswordSignInAsync(Input.Username, Input.Password, Input.RememberMe, false);
        if (result.Succeeded)
        {
            Console.WriteLine($"User {Input.Username} logged in successfully.");
            _navigationManager.NavigateTo(ReturnUrl ?? "/");
        }
        else if (result.RequiresTwoFactor)
        {
            Console.WriteLine($"User {Input.Username} requires two-factor authentication.");
        }
        else if (result.IsLockedOut)
        {
            Console.WriteLine($"User {Input.Username} is locked out.");
        }
        else
        {
            Console.WriteLine($"Invalid login attempt for user {Input.Username}.");
            _errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
