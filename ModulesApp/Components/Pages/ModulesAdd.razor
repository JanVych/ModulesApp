@using ModulesApp.Models
@using ModulesApp.Models.ModulesPrograms
@using ModulesApp.Services
@using ModulesApp.Services.Data
@using System.Text

@inject NavigationManager _navigationManager
@inject ModuleProgramService _moduleProgramService
@inject ModuleProgramManager _moduleProgramManager
@inject ModuleService _moduleService
@inject IJSRuntime JS

@implements IAsyncDisposable

@page "/modules/add"
@attribute [Authorize]

<PageTitle>Add module</PageTitle>

<div class="d-flex flex-column flex-grow-1 gap-2" style="height:100%;">
    <div>
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Size="Size.Large" OnClick="GoBack" />
            <MudText Typo="Typo.h4">Add module</MudText>
        </MudStack>
        <MudDivider/>
    </div>

    <MudPaper Class="d-flex justify-space-between align-content-center flex-wrap gap-2 py-2 px-6">

        <MudText Class="align-self-center" Typo="Typo.h6">
            @_status
        </MudText>

        <div class="d-flex gap-4">
            
            <MudButton OnClick="Listen" Disabled="(_status != Status.DIsconnected)" Variant="Variant.Filled" Color="Color.Primary">Listen</MudButton>
            <MudButton OnClick="Connect" Disabled="(_status != Status.DIsconnected)" Variant="Variant.Filled" Color="Color.Primary">Connect</MudButton>
            <MudButton OnClick="Disconnect" Disabled="(_status == Status.DIsconnected)" Variant="Variant.Filled" Color="Color.Primary">Disconnect</MudButton>
        </div>

        <div class="d-flex gap-4">
            <MudButton OnClick="EraseFlash" Disabled="(_status != Status.Connected || _disableActions)" Variant="Variant.Filled" Color="Color.Primary">Erase flash</MudButton>
            <MudButton OnClick="FlashFiles" Disabled="(_status != Status.Connected || _disableActions)" Variant="Variant.Filled" Color="Color.Primary">Flash files</MudButton>
        </div>
        
    </MudPaper>

    <MudExpansionPanels>
        <MudExpansionPanel Expanded="true">
            <TitleContent>
                <MudText Typo="Typo.h6">
                    Configuration
                </MudText>
            </TitleContent>
            <ChildContent>
                <div class="d-flex flex-grow-1 flex-wrap gap-2">
                    <div class="d-flex flex-column flex-grow-1 align-stretch gap-2">
                        <MudText Typo="Typo.subtitle1">
                            Settings
                        </MudText>
                        <MudDivider Class="flex-grow-0" />

                        <div>
                            <MudSelect T="DbModuleProgram" ValueChanged="SelectedProgramChanged" Disabled="_isCustoFilesChosen"
                                       Variant="Variant.Outlined" Label="Select Program"
                                       Margin="Margin.Dense" Style="max-width:300px;">
                                @foreach (var program in _programs)
                                {
                                    <MudSelectItem Value="@program">@program.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                        <MudSwitch T="bool" ValueChanged="CustomFilesSwitchChanged" Label="Custom files"
                                   Color="Color.Primary" />

                        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile" Disabled="!_isCustoFilesChosen" Accept=".bin">
                            <ActivatorContent>
                                <MudButton Variant="Variant.Outlined"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload">
                                    Upload File
                                </MudButton>
                            </ActivatorContent>
                        </MudFileUpload>
                    </div>

                    @if (!_isCustoFilesChosen)
                    {
                        <div class="d-flex flex-column flex-grow-1 align-stretch gap-2">
                            <MudText Typo="Typo.subtitle1">
                                Module Settings
                            </MudText>
                            <MudDivider Class="flex-grow-0" />
                            <MudTextField Label="Module name" @bind-Value="_moduleName" Class="flex-grow-0" Variant="Variant.Text"
                                          Style="max-width:300px;" />
                            <MudTextField Label="Server address" @bind-Value="_serverAddress" Class="flex-grow-0" Variant="Variant.Text"
                                          Style="max-width:300px;" />
                            <MudTextField Label="Wifi ssid" @bind-Value="_wifiSsid" Class="flex-grow-0" Variant="Variant.Text"
                                          Style="max-width:300px;" />

                            <MudTextField Label="Wifi password" @bind-Value="_wifiPassword" Class="flex-grow-0" Variant="Variant.Text"
                                          Style="max-width:300px;" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon"
                                          AdornmentAriaLabel="Show Password" InputType="@_passwordInputType" OnAdornmentClick="PasswordButtonCLick" />

                            <MudNumericField Label="Communication interval" @bind-Value="_communicationInterval" Class="flex-grow-0" Variant="Variant.Text"
                                             Style="max-width:300px;" Min="5" Max="86400" />
                        </div>
                    }

                    <div class="d-flex flex-column flex-grow-1 align-stretch gap-2">
                        <MudText Typo="Typo.subtitle1">
                            Files
                        </MudText>
                        <MudDivider Class="flex-grow-0" />

                        @foreach (var f in _binFiles)
                        {
                            <MudStack Row=true Justify="Justify.FlexStart" Spacing="2">
                                <MudText Class="align-self-center" Typo="Typo.body1" Style="width:200px">
                                    @f.Name
                                </MudText>
                                <div>
                                    <MudNumericField @bind-Value="f.Address" Disabled="!_isCustoFilesChosen" HideSpinButtons="true" Variant="Variant.Outlined" Margin="Margin.Dense"
                                                     Label="Flash address" Style="min-width:100px; max-width:350px" Min="4096"/>
                                </div>
                                @if (_isCustoFilesChosen)
                                {
                                    <MudIconButton Class="align-self-center" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" OnClick="(() => DeleteFile(f))" />
                                }
                            </MudStack>
                        }

                    </div>

                </div>
            </ChildContent>
        </MudExpansionPanel> 
    </MudExpansionPanels>

    <MudPaper Class="flex-grow-1">
        <div style="position:absolute; right: 20px;">
            <MudIconButton Icon="@Icons.Material.Filled.CleaningServices" Color="Color.Primary" Size="Size.Medium" OnClick="CleanCocnsole" />
        </div>
        <textarea readonly class="pa-2" style="width: 100%; height: 100%; background-color: transparent; color: var(--mud-palette-text-primary); outline: none; resize: none;">>
            @_consoleText
        </textarea>
    </MudPaper>
</div>


@code 
{
    public enum Status
    {
        DIsconnected,
        Connected,
        Listening
    }

    private IJSObjectReference? _JSmodule;
    private DotNetObjectReference<ModulesAdd>? _dotNetObjectRef;

    private string _consoleText = string.Empty;

    private Status _status;

    private List<DbModuleProgram> _programs = [];
    private DbModuleProgram? _selectedProgram;

    private bool _isCustoFilesChosen = false;
    private List<DbModuleProgram.ModuleBinFile> _customProgramBinFiles = [];

    private List<DbModuleProgram.ModuleBinFile> _binFiles = [];

    private bool _disableActions = false;

    private bool _isShow = false;
    private InputType _passwordInputType = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private string _serverAddress = string.Empty;
    private string _moduleName = "someName";
    private string _wifiSsid = "someSsid";
    private string _wifiPassword = "somePassword";
    private int _communicationInterval = 60;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _serverAddress = _navigationManager.BaseUri
                .Replace("https://", string.Empty)
                .Replace("http://", string.Empty);

            await JS.InvokeAsync<IJSObjectReference>("import", "./js/esptool_bundle.js");
            _JSmodule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/esptool_connection.js");
            _dotNetObjectRef = DotNetObjectReference.Create(this);
            await _JSmodule.InvokeVoidAsync("registerDotNetObject", _dotNetObjectRef);

            _programs = await _moduleProgramService.GetProgramsListAsync();
            // _selectedProgram = _programs.FirstOrDefault();
            // StateHasChanged();
        }
    }

    public async Task Disconnect()
    {
        if (_JSmodule != null)
        {
            await _JSmodule.InvokeVoidAsync("disconnect");
        }
    }

    public async Task Listen()
    {
        if (_JSmodule != null)
        {
            await _JSmodule.InvokeVoidAsync("startListening", 115200);
        }
    }

    public async Task Connect()
    {
        if (_JSmodule != null)
        {
            await _JSmodule.InvokeVoidAsync("connect", 115200, 10000);
        }
    }

    public async Task FlashFiles()
    {
        if(_JSmodule != null)
        {
            _disableActions = true;
            if(!_isCustoFilesChosen && _selectedProgram != null)
            {
                var module = CreateNewModule();
                CreateCsvNvsDataFile(_selectedProgram, module);
                _consoleText += "wait...\n";
                await _moduleProgramManager.BuildNvsDataAync(_selectedProgram, null);
                _consoleText += "nvs_data.bin created\n";
                await _selectedProgram.LoadBinFilesData();
            }
            await _JSmodule.InvokeVoidAsync("flashFiles", _binFiles);
            _disableActions = false;
        }
    }

    public async Task EraseFlash()
    {
        if (_JSmodule != null)
        {
            _disableActions = true;
            await _JSmodule.InvokeVoidAsync("eraseFlash");
            _disableActions = false;
        }
    }

    // public async Task HardReset()
    // {
    //     if (module != null)
    //     {
    //         await module.InvokeVoidAsync("hardReset");
    //     }
    // }

    [JSInvokable]
    public void WriteToConsole(string message)
    {
        _consoleText += message;
        InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void WriteLineToConsole(string message)
    {
        _consoleText += message + "\n";
        InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void CleanCocnsole()
    {
        _consoleText = string.Empty;
        InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void SetStatus(Status status)
    {
        _status = status;
        InvokeAsync(StateHasChanged);
    }

    private void SelectedProgramChanged(DbModuleProgram program)
    {
        _selectedProgram = program;
        _selectedProgram.LoadBinFiles();
        _binFiles = _selectedProgram.BinFiles;
    }

    private void CustomFilesSwitchChanged(bool value)
    {
        _isCustoFilesChosen = value;
        if (value)
        {
            _binFiles = _customProgramBinFiles;
        }
        else if(_selectedProgram != null)
        {
            _binFiles = _selectedProgram.BinFiles;
        }
    }

    private async Task UploadFile(IBrowserFile file)
    {
        using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        byte[] byteData = memoryStream.ToArray();
        var builder = new StringBuilder();
        foreach (var b in byteData)
        {
            builder.Append((char)b);
        }
        _customProgramBinFiles.Add(new DbModuleProgram.ModuleBinFile()
            {
                Name = file.Name,
                Address = 4096,
                Data = builder.ToString()
            });
    }

    private void CreateCsvNvsDataFile(DbModuleProgram program, DbModule module)
    {
        string[] data = new string[]
        {
            "key,type,encoding,value",
            "config,namespace,,",
            $"ServerAddress,data,string,\"{_serverAddress}\"",
            $"WifiSsid,data,string,\"{_wifiSsid}\"",
            $"WifiPassword,data,string,\"{_wifiPassword}\"",
            $"ModuleName,data,string,\"{_moduleName}\"",
            $"ModuleKey,data,string,\"{module.Key}\"",
            $"ModuleId,data,i64,{module.Id}",
            $"ProgramName,data,string,\"{program.Name}\"",
            $"CommInterval,data,i32,{_communicationInterval}",
        };
        try
        {
            File.WriteAllLines(Path.Combine(program.Path, "nvs_data.csv"), data);
            _consoleText += "CSV file created successfully.\n";
        }
        catch (Exception ex)
        {
            _consoleText += $"Error creating CSV file: {ex.Message}\n";
            InvokeAsync(StateHasChanged);
        }
    }

    private DbModule CreateNewModule()
    {
        DbModule module = new();
        module.LastResponse = DateTime.Now;
        module.Id = 0;
        module.Key = module.LastResponse.GetHashCode().ToString();
        module.Name = _moduleName;
        module.CommInterval = _communicationInterval;
        module.WifiSsid = _wifiSsid;
        module.WifiPassword = _wifiPassword;
        module = _moduleService.Add(module);
        module.ProgramName = _selectedProgram?.Name ?? "Unkown";
        module.FirmwareVersion = _selectedProgram?.Firmware.Version ?? "Unkown";
        return module;
    }

    private void DeleteFile(DbModuleProgram.ModuleBinFile file)
    {
        _customProgramBinFiles.Remove(file);
    }

    private void GoBack()
    {
        _navigationManager.NavigateTo("/modules");
    }

    void PasswordButtonCLick()
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInputType = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInputType = InputType.Text;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_JSmodule != null)
        {
            try
            {
                await _JSmodule.DisposeAsync();
            }
            catch
            {
            }
        }
        _dotNetObjectRef?.Dispose();
    }
}
