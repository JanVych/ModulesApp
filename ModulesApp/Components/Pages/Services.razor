@using ModulesApp.Models.BackgroundServices.Servicves
@using ModulesApp.Services
@using ModulesApp.Models.BackgroundServices
@using ModulesApp.Services.Data

@inject BackgroundServiceManager _backgroundServiceManager
@inject BackgroundServiceService _backgroundServiceService
@inject NavigationManager _navigationManager
@inject NotifyService _notifyService

@implements IDisposable

@page "/services"
@attribute [Authorize]

<PageTitle>Services</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Services</MudText>

<MudTable Items="@_services" Loading="@_servicesLoading" Hover="true">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Status</MudTh>
        @* <MudTh>Last run</MudTh> *@
@*         <MudTh>Interval</MudTh> *@
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Program">@context.Type</MudTd>

        <MudTd DataLabel="Status">
            <MudChip T="string" Color="context.GetStatusColor()">
                @context.Status
            </MudChip>
        </MudTd>
@*         <MudTd DataLabel="Last run">
            @context.LastRun.ToString()
        </MudTd> *@

@*         <MudTd DataLabel="Interval">
            @context.IntervalString
        </MudTd> *@

        <MudTd DataLabel="Actions">
            <MudStack Row="true">
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                Color="Color.Primary"
                OnClick="() => DetailService(context)">
                </MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                Color="Color.Secondary"
                OnClick="() => Delete(context)">
                </MudIconButton>
                @if(context.Status == BackgroundServiceStatus.Active)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.PauseCircleFilled"
                    Color="Color.Primary"
                    OnClick="() => PauseService(context)">
                    </MudIconButton>
                }
                else if (context.Status == BackgroundServiceStatus.Paused)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.PlayCircleFilled"
                    Color="Color.Primary"
                    OnClick="() => StartService(context)">
                    </MudIconButton>
                }
            </MudStack>
        </MudTd>
    </RowTemplate>
</MudTable>
<MudButton OnClick="Add" Class="ma-2" Variant="Variant.Outlined" Color="Color.Primary">Add</MudButton>

@code
{
    private List<DbBackgroundService> _services = [];
    private bool _servicesLoading = true;

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
        _notifyService.BackgroundServiceChangedEvent += OnDataChanged;
    }

    private async void OnDataChanged()
    {
        await UpdateData();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateData()
    {
        _servicesLoading = true;
        _services = await _backgroundServiceService.GetAllAsync();
        _servicesLoading = false;
    }

    private void Add()
    {
        _navigationManager.NavigateTo("/services/add");
    }

    private async Task Delete(DbBackgroundService service)
    {
        await _backgroundServiceManager.DeleteServiceAsync(service);
    }

    private void DetailService(DbBackgroundService service)
    {
        _navigationManager.NavigateTo("/services/detail?id=" + service.Id.ToString());
    }

    private async Task PauseService(DbBackgroundService service)
    {
        await _backgroundServiceManager.StopServiceAsync(service);
    }

    private async Task StartService(DbBackgroundService service)
    {
        await _backgroundServiceManager.StartServiceAsync(service);
    }

    public void Dispose()
    {
        _notifyService.BackgroundServiceChangedEvent -= OnDataChanged;
    }
}