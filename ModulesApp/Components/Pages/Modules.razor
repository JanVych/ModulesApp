@using ModulesApp.Models
@using ModulesApp.Services
@using ModulesApp.Services.Data

@inject ModuleService _moduleService
@inject IDialogService _dialogService
@inject NavigationManager _navigationManager
@inject NotifyService _notifyService

@implements IDisposable

@page "/modules"
@attribute [Authorize]

<PageTitle>Modules</PageTitle>

<MudText Typo="Typo.h4" Class="mx-4 my-2">Modules</MudText>

<MudTable Items="@_modules" Loading="@_modulesLoading" Hover="true">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Program</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Last response</MudTh>
        <MudTh>Free Memory</MudTh>
        <MudTh>Wifi network</MudTh>
        <MudTh>Firmware Version</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Program">@context.ProgramName</MudTd>

        <MudTd DataLabel="Status">
            <MudChip T="string" Color="@Color.Primary">
                @context.ProgramStatus
            </MudChip>
        </MudTd>

        <MudTd DataLabel="Last response">
            <MudChip T="string" Color="@context.LastResponseColor()">
                @context.LastResponseText()
            </MudChip>
        </MudTd>

        <MudTd DataLabel="Free Memory">
            @context.FreeHeapText()
        </MudTd>

        <MudTd DataLabel="Wifi network">@context.WifiCurrent</MudTd>
        <MudTd DataLabel="Firmware Version">@context.FirmwareVersion</MudTd>

        <MudTd DataLabel="Actions">
            <MudStack Row="true">
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                Color="Color.Primary"
                OnClick="() => DetailModule(context)">
                </MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                Color="Color.Secondary"
                OnClick="() => DeleteModule(context)">
                </MudIconButton>
            </MudStack>
        </MudTd>
    </RowTemplate>
</MudTable>

<MudButton OnClick="Add" Class="ma-2" Variant="Variant.Outlined" Color="Color.Primary">Add</MudButton>


<MudMessageBox @ref="_mudMessageBox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Deleting can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code
{
    private List<DbModule> _modules = [];
    private bool _modulesLoading = true;

    private MudMessageBox _mudMessageBox = new();

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
        _notifyService.ModulesDbChangedEvent += OnModulesChanged;
    }

    private async void OnModulesChanged()
    {
        await UpdateData();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateData()
    {
        _modulesLoading = true;
        _modules = await _moduleService.GetAllAsync();
        _modulesLoading = false;
    }

    private void DetailModule(DbModule module)
    {
        _navigationManager.NavigateTo("/modules/detail?id=" + module.Id.ToString());
    }

    private async Task DeleteModule(DbModule module)
    {
        bool? result = await _mudMessageBox.ShowAsync();
        if (result == true)
        {
            _moduleService.Delete(module);
        }
    }

    private void Add()
    {
        _navigationManager.NavigateTo("/modules/add");
    }

    public void Dispose()
    {
        _notifyService.ModulesDbChangedEvent -= OnModulesChanged;
    }
}