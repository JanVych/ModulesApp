@using ModulesApp.Components.BackgroundServices
@using ModulesApp.Models.BackgroundServices
@using ModulesApp.Services
@using ModulesApp.Services.Data
@using System.Text.Json

@inject NavigationManager _navigationManager
@inject BackgroundServiceManager _backgroundServiceManager
@inject BackgroundServiceService _backgroundServiceService

@page "/services/add"
@attribute [Authorize]

<PageTitle>Add Service</PageTitle>

<div>
    <div>
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Size="Size.Large" OnClick="GoBack" />
            @if (_service is not null)
            {
                <MudText Typo="Typo.h4">@_service.Name</MudText>
            }
        </MudStack>
    </div>

    <MudDivider Class="mb-4" />

    @if (_service is null)
    {
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    }
    else
    {
        <MudPaper Elevation="0" Class="px-4 pt-2 pb-2" Style="max-width: 800px;">
            <div>
                <MudText Typo="Typo.h5">Add new service</MudText>
                <MudDivider Class="my-2" />
            </div>

            <MudStack Spacing="4">
                <MudTextField @bind-Value="_service.Name" Label="Name" Variant="Variant.Text" Clearable />

                <MudSelect T="CronType" @bind-Value="_selectedCronType" Label="Trigger">
                    @foreach (CronType type in Enum.GetValues(typeof(CronType)))
                    {
                        <MudSelectItem Value="type"/>
                    }
                </MudSelect>

                @if(_selectedCronType == CronType.Interval)
                {
                    <MudStack Row="true">
                        <MudSelect T="TimeType" @bind-Value="_selectedTimeType" Label="Time">
                            @foreach (TimeType type in Enum.GetValues(typeof(TimeType)))
                            {
                                <MudSelectItem Value="type" />
                            }
                        </MudSelect>
                        @if (_selectedTimeType == TimeType.Seconds)
                        {
                            <MudNumericField T="int" Label="Seconds" Min="5" Max="59" @bind-Value="_selectedInterval"/>
                        }
                        else if (_selectedTimeType == TimeType.Minutes)
                        {
                            <MudNumericField T="int" Label="Minutes" Min="1" Max="59" @bind-Value="_selectedInterval" />
                        }
                        else if (_selectedTimeType == TimeType.Hours)
                        {
                            <MudNumericField T="int" Label="Hours" Min="1" Max="23" @bind-Value="_selectedInterval" />
                        }
                    </MudStack>
                }
                else if (_selectedCronType == CronType.SpecificTime)
                {
                    <MudTimePicker PickerVariant="PickerVariant.Inline" Label="Select Time" @bind-Time="_selectedTime" />
                    <MudStack Row="true" Wrap="Wrap.Wrap">
                        @foreach(DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
                        {
                            <MudCheckBox T="bool" @bind-Value="_selectedDaysOfWeek[(int)day]" Label="@day.ToString()" />
                        }
                    </MudStack>
                }
                else if (_selectedCronType == CronType.CronString)
                {
                    <MudTextField @bind-Value="_service.CronExpression" Label="Cron Expression" Variant="Variant.Text" Clearable />
                }

                <MudDivider Class="mb-4" />

                <MudSelect T="BackgroundServiceType" Value="_selectedType" Label="Type" ValueChanged="SelectedTypeChanged">
                    @foreach (BackgroundServiceType type in Enum.GetValues(typeof(BackgroundServiceType)))
                    {
                        <MudSelectItem Value="type" />
                    }
                </MudSelect>

                @if(_service.Type == BackgroundServiceType.Goodwe)
                {
                    <GoodweServiceConfiguration Service="_service" HasError=_hasError/>
                }
                else if (_service.Type == BackgroundServiceType.Http)
                {
                    <HttpServiceConfiguration Service="_service" HasError="_hasError"/>
                }

                <MudButton Variant="Variant.Filled" Style="max-width: 200px;" Color="Color.Primary" OnClick="SaveService">Save</MudButton>

            </MudStack>
        </MudPaper>
    }
</div>

@code
{
    private enum CronType
    {
        Interval,
        SpecificTime,
        CronString
    }
    private enum TimeType
    {
        Seconds,
        Minutes,
        Hours
    }

    private DbBackgroundService? _service;
    private BackgroundServiceType _selectedType = BackgroundServiceType.Cron;
    private bool _hasError = false;

    private CronType _selectedCronType = CronType.Interval;
    private TimeType _selectedTimeType = TimeType.Seconds;
    private int _selectedInterval = 5;
    private TimeSpan? _selectedTime = new();
    private bool[] _selectedDaysOfWeek = new bool[7];

    protected override void OnInitialized()
    {
        CreateNewService(_selectedType);
    }

    public void SelectedTypeChanged(BackgroundServiceType type)
    {
        if (type != _selectedType)
        {
            _selectedType = type;
            CreateNewService(type);
        }
    }

    public void CreateNewService(BackgroundServiceType type)
    {
        _service = new DbBackgroundService()
        {
            Name = type.ToString(),
            Type = type,
        };
    }

    private void GoBack()
    {
        _navigationManager.NavigateTo("/services");
    }

    private string GenerateValueTypeText(object value)
    {
        if (value is JsonElement jsonElement)
        {
            return jsonElement.ValueKind.ToString();
        }
        return value.GetType().Name;
    }

    private async Task SaveService()
    {
        if (_service != null && !_hasError)
        {
            ConvertToCroneExpression();
            await _backgroundServiceManager.CreateServiceAsync(_service);
            GoBack();
        }
    }

    private void ConvertToCroneExpression()
    {
        if(_service != null)
        {
            if (_selectedCronType == CronType.Interval)
            {
                _service.CronExpression = _selectedTimeType switch
                {
                    TimeType.Seconds => $"*/{_selectedInterval} * * * * ?",
                    TimeType.Minutes => $"0 */{_selectedInterval} * * * ?",
                    TimeType.Hours => $"0 0 */{_selectedInterval} * * ?",
                    _ => $"*/5 * * * * ?"
                };
            }
            else if (_selectedCronType == CronType.SpecificTime && _selectedTime != null)
            {
                var days = string
                .Join(",", _selectedDaysOfWeek
                .Select((b, i) => new { b, i })
                .Where(x => x.b)
                .Select(x => GetDayOfWeekString((DayOfWeek)x.i)));
                if(string.IsNullOrEmpty(days))
                {
                    days = "*";
                }

                _service.CronExpression = $"0 {_selectedTime.Value.Minutes} {_selectedTime.Value.Hours} ? * {days} *";
            }
        }
    }

    private string GetDayOfWeekString(DayOfWeek dayOfWeek)
    {
        return dayOfWeek switch
        {
            DayOfWeek.Sunday => "SUN",
            DayOfWeek.Monday => "MON",
            DayOfWeek.Tuesday => "TUE",
            DayOfWeek.Wednesday => "WED",
            DayOfWeek.Thursday => "THU",
            DayOfWeek.Friday => "FRI",
            DayOfWeek.Saturday => "SAT",
            _ => string.Empty
        };
    }
}
