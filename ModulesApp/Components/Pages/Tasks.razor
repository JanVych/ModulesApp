@using ModulesApp.Components.ServerTasks
@using ModulesApp.Components.ServerTasks.Links
@using ModulesApp.Components.ServerTasks.Nodes
@using ModulesApp.Components.ServerTasks.Ports
@using ModulesApp.Models
@using ModulesApp.Interfaces
@using ModulesApp.Models.Dasboards
@using ModulesApp.Services
@using ModulesApp.Models.BackgroundServices
@using ModulesApp.Models.ServerTasks
@using ModulesApp.Services.Data
@using Blazor.Diagrams
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Core.Routers
@using Blazor.Diagrams.Options
@using Blazor.Diagrams.Core.Models

@inject ServerTaskService _serverTaskService
@inject ModuleService _moduleService
@inject BackgroundServiceService _backgroundServiceService
@inject DashboardService _dashboardService
@inject ContextService _serverContextService

@page "/tasks"
@attribute [Authorize]

<PageTitle>Tasks</PageTitle>

<div class="d-flex flex-column flex-grow-1 gap-1" style="height:100%;">

    <MudPaper Class="d-flex justify-space-between align-content-center px-2">

        <MudTooltip Text="@(_showTasksList ? "Hide tasks" : "Show tasks")">
            <MudToggleIconButton Icon="@Icons.Material.Filled.List"
                                 Color="@Color.Primary"
                                 ToggledIcon="@Icons.Material.Filled.List"
                                 ToggledColor="@Color.Default"
                                 @bind-Toggled="_showTasksList" />
        </MudTooltip>

        @if (_selectedTask != null)
        {
            <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
                <MudText Typo="Typo.h6" Class="align-self-center">
                    @_selectedTask.Name
                </MudText>
            </MudHidden>
        }

        <MudStack Row=true Spacing="2">
            <MudTooltip Text="Run">
                <MudIconButton Icon="@Icons.Material.Filled.PlayCircleFilled" Color="Color.Primary" Disabled="_runDisabled" OnClick="@RunTask" />
            </MudTooltip>
            <MudTooltip Text="Save">
                <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="@SaveTask" />
            </MudTooltip>
            <MudTooltip Text="Delete">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="@DeleteTask" />
            </MudTooltip>
        </MudStack>

        <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
            <MudText Typo="Typo.h6" Class="invisible align-self-center">
                @_selectedTask?.Name
            </MudText>
        </MudHidden>

        <MudTooltip Text="@(_showTaskSettings ? "Hide settings" : "Show settings")">
            <MudToggleIconButton Icon="@Icons.Material.Filled.Settings"
                                 Color="@Color.Primary"
                                 ToggledIcon="@Icons.Material.Filled.Settings"
                                 ToggledColor="@Color.Default"
                                 @bind-Toggled="_showTaskSettings" />
        </MudTooltip>

    </MudPaper>

    <div class="d-flex align-stretch flex-grow-1 overflow-y-auto gap-1">
        @if (_showTasksList)
        {
            <MudPaper Class="d-flex flex-column gap-2 pa-2" Style="height: 100%; min-width:250px; max-width:250px" Elevation="1">
                <div class="d-flex justify-space-between align-content-center">
                    <MudText Class="mx-4 align-self-center" Typo="Typo.h5">Tasks</MudText>
                    <MudTooltip Text="Add">
                        <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Primary" OnClick="@AddNewTask" />
                    </MudTooltip>
                </div>
                <MudDivider Class="flex-grow-0 " />
                <MudList T="DbTask" SelectedValue="_selectedTask" SelectedValueChanged="ChangeSelectedTask" Class="flex-grow-1 overflow-y-auto ">
                    @foreach (var task in _tasks)
                    {
                        <MudListItem Class="py-0" Value="task">@task.Name</MudListItem>
                    }
                </MudList>
            </MudPaper>
        }

        @if (_currentDiagram != null)
        {
            <div class="d-flex flex-column flex-grow-1 gap-2">
                <MudPaper Elevation="1" Class="d-flex flex-wrap gap-2 pa-2 ">
                    <NodeAddButton NodeType="NodeType.FromMessage" OnClick="() => AddNode(NodeType.FromMessage)" />
                    <NodeAddButton NodeType="NodeType.FromAny" OnClick="() => AddNode(NodeType.FromAny)" />
                    <NodeAddButton NodeType="NodeType.Value" OnClick="() => AddNode(NodeType.Value)" />
                    <NodeAddButton NodeType="NodeType.DateTime" OnClick="() => AddNode(NodeType.DateTime)" />

                    <NodeAddComplexButton NodeType="NodeType.Condition" OnCLick="AddNode" />
                    <NodeAddComplexButton NodeType="NodeType.ArrayOperation" OnCLick="AddNode" />
                    <NodeAddComplexButton NodeType="NodeType.ArithmeticOperation" OnCLick="AddNode" />
                    <NodeAddComplexButton NodeType="NodeType.ConvertTo" OnCLick="AddNode" />
                    <NodeAddComplexButton NodeType="NodeType.BooleanOperation" OnCLick="AddNode" />

                    <NodeAddButton NodeType="NodeType.DataDisplay" OnClick="() => AddNode(NodeType.DataDisplay)" />
                    <NodeAddButton NodeType="NodeType.SendMessage" OnClick="() => AddNode(NodeType.SendMessage)" />
                </MudPaper>

                <MudPaper Elevation="1" Class="flex-grow-1" Style="min-height:200px">
                    <CascadingValue Value="_currentDiagram" IsFixed="true">
                        <DiagramCanvas>
                            <Widgets>
                                <GridWidget Size="30" Mode="GridMode.Point" BackgroundColor="var(--mud-palette-background)" />

                                <NavigatorWidget Width="200"
                                                 Height="120"
                                                 Class="border border-secondary absolute"
                                                 Style="bottom: 15px; right: 15px; background-color: var(--mud-palette-background);">
                                </NavigatorWidget>
                                <SelectionBoxWidget />
                            </Widgets>
                            <AdditionalHtml>
                            </AdditionalHtml>
                            <AdditionalSvg>
                            </AdditionalSvg>
                        </DiagramCanvas>
                    </CascadingValue>
                </MudPaper>
            </div>
        }

        @if (_showTaskSettings && _selectedTask != null)
        {
            <MudPaper Class="d-flex flex-column gap-2 pa-2" Style="height: 100%; min-width:250px; max-width:250px" Elevation="1">
                <MudText Class="mx-4" Typo="Typo.h5">Settings</MudText>
                <MudDivider Class="flex-grow-0 " />

                <MudTextField @bind-Value="_selectedTask.Name" Label="Name" Variant="Variant.Text" Class="flex-grow-0 " />

                <div>
                    <MudSelect @bind-Value="_selectedTask.TriggerSourceType" Label="Trigger source">

                        @foreach (TargetType type in Enum.GetValues(typeof(TargetType)))
                        {
                            <MudSelectItem Value="type" />
                        }
                    </MudSelect>
                </div>
                <div>
                    @if (_selectedTask.TriggerSourceType == TargetType.Service)
                    {
                        <MudSelect @bind-Value="_selectedTask.BackgroundService" Label="Service">
                            @foreach (var service in _services)
                            {
                                <MudSelectItem Value="service" />
                            }
                        </MudSelect>
                    }
                    else if (_selectedTask.TriggerSourceType == TargetType.Module)
                    {
                        <MudSelect @bind-Value="_selectedTask.Module" Label="Module">
                            @foreach (var module in _modules)
                            {
                                <MudSelectItem Value="module" />
                            }
                        </MudSelect>
                    }
                    else if (_selectedTask.TriggerSourceType == TargetType.Dashboard)
                    {
                        <MudSelect @bind-Value="_selectedTask.DashboardEntity" Label="Dashboard">
                            @foreach (var entity in _entities)
                            {
                                <MudSelectItem Value="entity" />
                            }
                        </MudSelect>
                    }
                </div>

                <MudText Class="mx-4 mt-4" Typo="Typo.h5">Debug</MudText>
                <MudDivider Class="flex-grow-0 " />

                <MudSwitch T="bool" Value="_showNodesId" ValueChanged="TogleNodesId" Color="Color.Primary">
                    Show nodes id
                </MudSwitch>

                <div class="flex-grow-1 overflow-y-auto">
                    @foreach (var line in _debugText)
                    {
                        <MudText Class="mx-4" Color="@line.Item1" Typo="Typo.body2">@line.Item2</MudText>
                    }
                </div>
            </MudPaper>
        }
    </div>
</div>

@code
{
    bool _showTasksList = true;
    bool _showTaskSettings = true;
    bool _showNodesId = false;
    List<(Color,string)> _debugText = [];

    private List<DbTask> _tasks = [];

    private DbTask? _selectedTask;

    private BlazorDiagram? _currentDiagram;

    private List<DbModule> _modules = [];
    private List<DbBackgroundService> _services = [];
    private List<DbDashboardEntity> _entities = [];

    private bool _runDisabled = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var options = new BlazorDiagramOptions
            {
                AllowMultiSelection = true,
                Zoom =
                    {
                        Enabled = true,
                    },
                Links =
                    {
                        Factory = LinkFactory.CustomLinkFactory,
                        DefaultRouter = new NormalRouter(),
                        DefaultPathGenerator = new SmoothPathGenerator(),
                    },
            };

            _currentDiagram = new BlazorDiagram(options);

            _currentDiagram.RegisterComponent<FromMessageNode, FromMessageWidget>();
            _currentDiagram.RegisterComponent<ConditionNode, ConditionWidget>();
            _currentDiagram.RegisterComponent<DataDisplayNode, DataDisplayWidget>();
            _currentDiagram.RegisterComponent<ValueNode, ValueWidget>();
            _currentDiagram.RegisterComponent<SendMessageNode, SendMessageWidget>();
            _currentDiagram.RegisterComponent<ArrayOperationNode, ArrayOperationWidget>();
            _currentDiagram.RegisterComponent<ArithmeticOperationNode, ArithmeticOperationWidget>();
            _currentDiagram.RegisterComponent<ConvertToNode, ConvertToWidget>();
            _currentDiagram.RegisterComponent<DateTimeNode, DateTimeWidget>();
            _currentDiagram.RegisterComponent<FromAnyNode, FromAnyWidget>();
            _currentDiagram.RegisterComponent<BooleanOperationNode, BooleanOperationWidget>();

            _modules = await _moduleService.GetAllAsync();
            _services = await _backgroundServiceService.GetAllAsync();
            _entities = await _dashboardService.GetAllDashBoardEntitiesAsync();

            _tasks = await _serverTaskService.GetAllTaskaAsync();

            await ChangeSelectedTask(_tasks?.FirstOrDefault());
            StateHasChanged();
        }
    }

    private void ClearDiagram()
    {
        _debugText.Clear();
        _showNodesId = false;
        if (_currentDiagram != null)
        {
            _currentDiagram.SetPan(0, 0);
            _currentDiagram.SetZoom(1.0f);
            _currentDiagram.Nodes.Clear();
            _currentDiagram.Links.Clear();
        }
    }

    private async Task ChangeSelectedTask(DbTask? task)
    {
        ClearDiagram();
        _selectedTask = task;
        await LoadDiagram();
    }

    private async Task AddNewTask()
    {
        ClearDiagram();
        var newTask = new DbTask
        {
            Name = $"New Task {_tasks.Count}",
        };
        await _serverTaskService.AddAsync(newTask);
        _tasks.Add(newTask);
        _selectedTask = _tasks.LastOrDefault();
    }

    private async Task DeleteTask()
    {
        if (_selectedTask != null)
        {
            ClearDiagram();
            await _serverTaskService.DeleteAsync(_selectedTask);
            _tasks.Remove(_selectedTask);
            _selectedTask = _tasks.FirstOrDefault();
            await LoadDiagram();
        }
    }

    private async Task SaveTask()
    {
        if (_selectedTask != null && _currentDiagram != null)
        {
            if (_selectedTask.TriggerSourceType == TargetType.Module)
            {
                _selectedTask.BackgroundServiceId = null;
                _selectedTask.BackgroundService = null;
                _selectedTask.DashboardEntityId = null;
                _selectedTask.DashboardEntity = null;

            }
            else if (_selectedTask.TriggerSourceType == TargetType.Service)
            {
                _selectedTask.ModuleId = null;
                _selectedTask.Module = null;
                _selectedTask.DashboardEntityId = null;
                _selectedTask.DashboardEntity = null;
            }
            else if (_selectedTask.TriggerSourceType == TargetType.Dashboard)
            {
                _selectedTask.ModuleId = null;
                _selectedTask.Module = null;
                _selectedTask.BackgroundServiceId = null;
                _selectedTask.BackgroundService = null;
            }
            await _serverTaskService.SaveDiagramAsync(_selectedTask, _currentDiagram);
        }
    }

    private async Task RunTask()
    {
        // var stopwatch = Stopwatch.StartNew();
        _debugText.Clear();
        _runDisabled = true;
        if (_selectedTask != null)
        {
            await SaveTask();
            await _serverTaskService.ExecuteTaskAsync(_serverContextService, _selectedTask, PrintDebugText);
        }
        await Task.Delay(1000);
        _runDisabled = false;
        // stopwatch.Stop();
        // Debug.WriteLine($"Elapsed Time: {stopwatch.ElapsedMilliseconds} ms");
    }

    private void PrintDebugText(DbTaskNode node, NodeValue? value)
    {
        var text = $"Node: {node.Order} | {value?.ToString()}" ?? "null";
        var color = value?.Type switch
        {
            NodeValueType.Invalid => Color.Warning,
            _ => Color.Success
        };
        _debugText.Add((color, text));
        if (_debugText.Count > 20)
        {
            _debugText.RemoveAt(0);
        }
        StateHasChanged();
    }

    private void TogleNodesId(bool value)
    {
        _showNodesId = value;
        if (_currentDiagram != null)
        {
            foreach (TaskNode node in _currentDiagram.Nodes)
            {
                node.ShowIdentifier = value;
                node.Refresh();
            }
        }
        _currentDiagram?.Refresh();
        StateHasChanged();
    }

    private void AddNode(NodeType type, int subType = 0)
    {
        if (_currentDiagram?.Container != null)
        {
            var x = (-_currentDiagram.Pan.X) + 40;
            var y = (-_currentDiagram.Pan.Y) + 75;

            var set = new HashSet<int>(_currentDiagram.Nodes.Select(item => item.Order));
            int smallestOrder = 1;
            while (set.Contains(smallestOrder))
            {
                smallestOrder++;
            }

            Blazor.Diagrams.Core.Geometry.Point point = new(x, y);

            if (type == NodeType.Condition)
            {
                _currentDiagram.Nodes.Add(new ConditionNode(_serverContextService, (NodeConditionType)subType, point) { Order = smallestOrder });
            }
            else if (type == NodeType.FromMessage)
            {
                _currentDiagram.Nodes.Add(new FromMessageNode(_serverContextService, point) { Order = smallestOrder });
            }
            else if (type == NodeType.DataDisplay)
            {
                _currentDiagram.Nodes.Add(new DataDisplayNode(_serverContextService, point) { Order = smallestOrder });
            }
            else if (type == NodeType.Value)
            {
                _currentDiagram.Nodes.Add(new ValueNode(_serverContextService, point) { Order = smallestOrder });
            }
            else if (type == NodeType.SendMessage)
            {
                _currentDiagram.Nodes.Add(new SendMessageNode(_serverContextService, point) { Order = smallestOrder });
            }
            else if (type == NodeType.ArrayOperation)
            {
                _currentDiagram.Nodes.Add(new ArrayOperationNode(_serverContextService, (NodeArrayOperationType)subType, point) { Order = smallestOrder });
            }
            else if (type == NodeType.ArithmeticOperation)
            {
                _currentDiagram.Nodes.Add(new ArithmeticOperationNode(_serverContextService, (NodeArithmeticOperationType)subType, point) { Order = smallestOrder });
            }
            else if (type == NodeType.ConvertTo)
            {
                _currentDiagram.Nodes.Add(new ConvertToNode(_serverContextService, (NodeValueType)subType, point) { Order = smallestOrder });
            }
            else if (type == NodeType.DateTime)
            {
                _currentDiagram.Nodes.Add(new DateTimeNode(_serverContextService, point) { Order = smallestOrder });
            }
            else if (type == NodeType.FromAny)
            {
                _currentDiagram.Nodes.Add(new FromAnyNode(_serverContextService, point) { Order = smallestOrder });
            }
            else if (type == NodeType.BooleanOperation)
            {
                _currentDiagram.Nodes.Add(new BooleanOperationNode(_serverContextService, (NodeBooleanOperationType)subType, point) { Order = smallestOrder });
            }
        }
    }

    private async Task LoadDiagram()
    {
        if (_currentDiagram != null && _selectedTask != null)
        {
            var nodes = new List<DbTaskNode>();
            var links = await _serverTaskService.GetLinksAsync(_selectedTask);
            _selectedTask.Nodes = nodes;

            foreach (var link in links)
            {
                if (!nodes.Contains(link.Source))
                {
                    nodes.Add(link.Source);
                }
                if (!nodes.Contains(link.Target))
                {
                    nodes.Add(link.Target);
                }
            }

            foreach (var node in nodes)
            {
                if (node.Type == NodeType.Condition)
                {
                    _currentDiagram.Nodes.Add(new ConditionNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.FromMessage)
                {
                    _currentDiagram.Nodes.Add(new FromMessageNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.DataDisplay)
                {
                    _currentDiagram.Nodes.Add(new DataDisplayNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.Value)
                {
                    _currentDiagram.Nodes.Add(new ValueNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.SendMessage)
                {
                    _currentDiagram.Nodes.Add(new SendMessageNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.ArrayOperation)
                {
                    _currentDiagram.Nodes.Add(new ArrayOperationNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.ArithmeticOperation)
                {
                    _currentDiagram.Nodes.Add(new ArithmeticOperationNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.ConvertTo)
                {
                    _currentDiagram.Nodes.Add(new ConvertToNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.DateTime)
                {
                    _currentDiagram.Nodes.Add(new DateTimeNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.FromAny)
                {
                    _currentDiagram.Nodes.Add(new FromAnyNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.BooleanOperation)
                {
                    _currentDiagram.Nodes.Add(new BooleanOperationNode(_serverContextService, node));
                }
            }

            foreach (var dbLink in links)
            {
                var source = _currentDiagram.Nodes.First(n => n.Order == dbLink.Source.Order);
                var target = _currentDiagram.Nodes.First(n => n.Order == dbLink.Target.Order);
                LinkModel? linkModel;
                TaskPort? sourcePort = null;
                TaskPort? targetPort = null;

                foreach (TaskPort port in source.Ports)
                {
                    if (port.PositionAlignment == dbLink.SourcePositionAlignment && port.Input == dbLink.SourceInput)
                    {
                        sourcePort = port;
                        break;
                    }
                }

                foreach (TaskPort port in target.Ports)
                {
                    if (port.PositionAlignment == dbLink.TargetPositionAlignment && port.Input == dbLink.TargetInput)
                    {
                        targetPort = port;
                        break;
                    }
                }
                if (sourcePort != null && targetPort != null)
                {
                    linkModel = new LinkModel(sourcePort, targetPort);
                    linkModel.Color = "var(--mud-palette-text-secondary)";
                    // if (!sourcePort.Data || !targetPort.Data)
                    // {
                    //     linkModel.Color = "var(--mud-palette-text-disabled)";
                    // }
                    // else
                    // {
                    //     linkModel.Color = "var(--mud-palette-text-secondary)";
                    // }
                    _currentDiagram.Links.Add(linkModel);
                }
            }
        }
    }
}