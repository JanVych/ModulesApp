@using Microsoft.AspNetCore.Authorization
@using ModulesApp.Components.ServerTasks.Links
@using ModulesApp.Components.ServerTasks.Nodes
@using ModulesApp.Components.ServerTasks.Ports
@using ModulesApp.Models
@using ModulesApp.Interfaces
@using ModulesApp.Models.Dasboards
@using ModulesApp.Services
@using ModulesApp.Models.BackgroundServices
@using ModulesApp.Models.ServerTasks
@using ModulesApp.Services.Data
@using Blazor.Diagrams
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Core.Routers
@using Blazor.Diagrams.Options
@using Blazor.Diagrams.Core.Models

@inject ServerTaskService _serverTaskService
@inject ModuleService _moduleService
@inject BackgroundServiceService _backgroundServiceService
@inject DashboardService _dashboardService
@inject ContextService _serverContextService

@page "/tasks"
@* @attribute [Authorize] *@

<PageTitle>Tasks</PageTitle>

<MudGrid Spacing="0">

    <MudItem xs="12" md="2">
        <MudStack Spacing="2">
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudText Typo="Typo.h4">Tasks</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Primary" OnClick="@AddNewTask" />
            </MudStack>
            <MudDivider />
            <MudList T="DbTask" SelectedValue="_selectedTask" SelectedValueChanged="ChangeSelectedTask">
                @foreach (var task in _tasks)
                {
                    <MudListItem Value="task">@task.Name</MudListItem>
                }
            </MudList>
            <MudDivider />
        </MudStack>
    </MudItem>

    <MudItem xs="12" md="10" Class="pl-4">
        @if (_selectedTask != null)
        {
            <MudPaper Class="pa-4">
                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                     <MudText Typo="Typo.h5">
                        @_selectedTask.Name
                    </MudText>
                    <MudStack Row="true">
                        <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="@SaveTask" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="@DeleteTask" />
                        <MudIconButton Icon="@Icons.Material.Filled.PlayCircleFilled" Color="Color.Primary" OnClick="@RunTask" />
                    </MudStack>
                </MudStack>

                <MudStack Row="true" Wrap="Wrap.Wrap">
                    <MudTextField @bind-Value="_selectedTask.Name" Variant="Variant.Text" />
                    <MudSelect @bind-Value="_selectedTask.TriggerSourceType">

                        @foreach (TargetType type in Enum.GetValues(typeof(TargetType)))
                        {
                            <MudSelectItem Value="type"></MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect @bind-Value="_selectedTask.Type">
                        @foreach (TaskType type in Enum.GetValues(typeof(TaskType)))
                        {
                            <MudSelectItem Value="type"></MudSelectItem>
                        }
                    </MudSelect>
                    @if (_selectedTask.TriggerSourceType == TargetType.Service)
                    {
                        <MudSelect @bind-Value="_selectedTask.BackgroundService">
                            @foreach (var service in _services)
                            {
                                <MudSelectItem Value="service"></MudSelectItem>
                            }
                        </MudSelect>
                    }
                    else if (_selectedTask.TriggerSourceType == TargetType.Module)
                    {
                        <MudSelect @bind-Value="_selectedTask.Module">
                            @foreach (var module in _modules)
                            {
                                <MudSelectItem Value="module"></MudSelectItem>
                            }
                        </MudSelect>
                    }
                    else if (_selectedTask.TriggerSourceType == TargetType.DashboardEntity)
                    {
                        <MudSelect @bind-Value="_selectedTask.DashboardEntity">
                            @foreach (var entity in _entities)
                            {
                                <MudSelectItem Value="entity"></MudSelectItem>
                            }
                        </MudSelect>
                    }
                </MudStack>
            </MudPaper>
        }

        <MudPaper Class="pa-4 mb-2">
            <MudStack Row="true" Wrap="Wrap.Wrap">

                <MudButton StartIcon="@Icons.Material.Filled.Message"
                           Variant="Variant.Filled"
                           Style="background-color: var(--from-message-node-color); color: var(--node-background-color);"
                           OnClick="() => AddNode(NodeType.FromMessage)">
                    From Message
                </MudButton>

                <MudButton StartIcon="@Icons.Material.Filled.Numbers"
                           Variant="Variant.Filled"
                           Style="background-color: var(--value-node-color); color: var(--node-background-color);"
                           OnClick="() => AddNode(NodeType.Value)">
                    Static Value
                </MudButton>

                <MudButtonGroup Variant="Variant.Filled">
                    <MudButton Style="background-color: var(--condition-node-color); color: var(--node-background-color);"
                               OnClick="() => AddNode(NodeType.Condition)">
                        Condition
                    </MudButton>
                    <MudMenu EndIcon="@Icons.Material.Filled.ArrowDropDown"
                             Label="@_selectedCondition.ToLongString()"
                             Class="custom-menu-label custom-menu-icon"
                             Style="auto; background-color: var(--condition-node-color);">

                        @foreach (NodeConditionType condition in Enum.GetValues(typeof(NodeConditionType)))
                        {
                            <MudMenuItem Style="background-color: var(--condition-node-color); color: var(--node-background-color);"
                                         @onclick="() => ChangeConditionType(condition)">
                                @condition.ToLongString()
                            </MudMenuItem>
                        }

                    </MudMenu>
                </MudButtonGroup>

                <MudButton StartIcon="@Icons.Material.Filled.DashboardCustomize"
                           Variant="Variant.Filled"
                           Style="background-color: var(--data-display-node-color); color: var(--node-background-color);"
                           OnClick="() => AddNode(NodeType.DataDisplay)">
                    Data Display
                </MudButton>

                <MudButton StartIcon="@Icons.Material.Filled.Send"
                           Variant="Variant.Filled"
                           Style="background-color: var(--send-message-node-color); color: var(--node-background-color);"
                           OnClick="() => AddNode(NodeType.SendMessage)">
                    Send Message
                </MudButton>

                <MudButtonGroup Variant="Variant.Filled">
                    <MudButton Style="background-color: var(--array-operation-node-color); color: var(--node-background-color);"
                               OnClick="() => AddNode(NodeType.ArrayOperation)">
                        Array
                    </MudButton>
                    <MudMenu EndIcon="@Icons.Material.Filled.ArrowDropDown"
                             Label="@_selectedOperation.ToLongString()"
                             Class="custom-menu-label custom-menu-icon"
                             Style="background-color: var(--array-operation-node-color);">

                        @foreach (NodeArrayOperationType operation in Enum.GetValues(typeof(NodeArrayOperationType)))
                        {
                            <MudMenuItem Style="background-color: var(--array-operation-node-color); color: var(--node-background-color);"
                                         @onclick="() => ChangeOperationType(operation)">
                                @operation.ToLongString()
                            </MudMenuItem>
                        }

                    </MudMenu>
                </MudButtonGroup>

                <MudButtonGroup Variant="Variant.Filled">
                    <MudButton Style="background-color: var(--arithmetic-operation-node-color); color: var(--node-background-color);"
                               OnClick="() => AddNode(NodeType.ArithmeticOperation)">
                        Arithmetic
                    </MudButton>
                    <MudMenu EndIcon="@Icons.Material.Filled.ArrowDropDown"
                             Label="@_selectedArithmeticOperation.ToString()"
                             Class="custom-menu-label custom-menu-icon"
                             Style="background-color: var(--arithmetic-operation-node-color);">

                        @foreach (NodeArithmeticOperationType operation in Enum.GetValues(typeof(NodeArithmeticOperationType)))
                        {
                            <MudMenuItem Style="background-color: var(--arithmetic-operation-node-color); color: var(--node-background-color);"
                                         @onclick="() => _selectedArithmeticOperation = operation">
                                @operation.ToString()
                            </MudMenuItem>
                        }
                    </MudMenu>
                </MudButtonGroup>

                <MudButtonGroup Variant="Variant.Filled">
                    <MudButton Style="background-color: var(--convert-to-color); color: var(--node-background-color);"
                               OnClick="() => AddNode(NodeType.ConvertTo)">
                        To
                    </MudButton>
                    <MudMenu EndIcon="@Icons.Material.Filled.ArrowDropDown"
                             Label="@_selectedConvertTo.ToString()"
                             Class="custom-menu-label custom-menu-icon"
                             Style="background-color: var(--convert-to-color);">

                        @foreach (NodeConvertToType operation in Enum.GetValues(typeof(NodeConvertToType)))
                        {
                            <MudMenuItem Style="background-color: var(--convert-to-color); color: var(--node-background-color);"
                                         @onclick="() => _selectedConvertTo = operation">
                                @operation.ToString()
                            </MudMenuItem>
                        }
                    </MudMenu>
                </MudButtonGroup>

            </MudStack>
        </MudPaper>

        @if (_currentDiagram != null)
        {
            <MudPaper class="diagram-container pa-2">
                <CascadingValue Value="_currentDiagram" IsFixed="true">
                    <DiagramCanvas>
                        <Widgets>
                            <GridWidget Size="30" Mode="GridMode.Point" BackgroundColor="var(--mud-palette-background)" />

                            <NavigatorWidget Width="200"
                                             Height="120"
                                             Class="border border-secondary absolute"
                                             Style="bottom: 15px; right: 15px; background-color: var(--mud-palette-background);">
                            </NavigatorWidget>

                        </Widgets>
                        <AdditionalHtml>

                        </AdditionalHtml>
                        <AdditionalSvg>

                        </AdditionalSvg>
                    </DiagramCanvas>
                </CascadingValue>
            </MudPaper>
        }
    </MudItem>
</MudGrid>

<style>
    .diagram-container {
        width: 100%;
        height: 65vh;
        /*         border: 2px solid var(--mud-palette-drawer-text); */
    }

    .custom-menu-icon .mud-icon-root {
        color: var(--node-background-color);
    }

    .custom-menu-label .mud-button-label {
        color: var(--node-background-color);
    }

</style>


@code
{
    private List<DbTask> _tasks = [];

    // private bool _tasksLoading = true;
    private DbTask? _selectedTask;

    private BlazorDiagram? _currentDiagram;

    private NodeConditionType _selectedCondition = NodeConditionType.Equal;
    private NodeArrayOperationType _selectedOperation = NodeArrayOperationType.ArraySlice;

    private NodeArithmeticOperationType _selectedArithmeticOperation = NodeArithmeticOperationType.Add;
    private NodeConvertToType _selectedConvertTo = NodeConvertToType.String;

    private List<DbModule> _modules = [];
    private List<DbBackgroundService> _services = [];
    private List<DbDashboardEntity> _entities = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var options = new BlazorDiagramOptions
                {
                    AllowMultiSelection = true,
                    Zoom =
                    {
                        Enabled = true,
                    },
                    Links =
                    {
                        Factory = LinkFactory.CustomLinkFactory,
                        DefaultRouter = new NormalRouter(),
                        DefaultPathGenerator = new SmoothPathGenerator(),
                    },
                };

            _currentDiagram = new BlazorDiagram(options);

            _currentDiagram.RegisterComponent<FromMessageNode, FromMessageWidget>();
            _currentDiagram.RegisterComponent<ConditionNode, ConditionWidget>();
            _currentDiagram.RegisterComponent<DataDisplayNode, DataDisplayWidget>();
            _currentDiagram.RegisterComponent<ValueNode, ValueWidget>();
            _currentDiagram.RegisterComponent<SendMessageNode, SendMessageWidget>();
            _currentDiagram.RegisterComponent<ArrayOperationNode, ArrayOperationWidget>();
            _currentDiagram.RegisterComponent<ArithmeticOperationNode, ArithmeticOperationWidget>();
            _currentDiagram.RegisterComponent<ConvertToNode, ConvertToWidget>();

            _modules = await _moduleService.GetAllAsync();
            _services = await _backgroundServiceService.GetAllAsync();
            _entities = await _dashboardService.GetAllDashBoardEntitiesAsync();

            _tasks = await _serverTaskService.GetAllTaskaAsync();

            await ChangeSelectedTask(_tasks?.FirstOrDefault());
            // _tasksLoading = false;
            StateHasChanged();
        }
    }

    private void ClearDiagram()
    {
        if (_currentDiagram != null)
        {
            _currentDiagram.Nodes.Clear();
            _currentDiagram.Links.Clear();
        }
    }

    private async Task ChangeSelectedTask(DbTask? task)
    {
        ClearDiagram();
        _selectedTask = task;
        await LoadDiagram();
    }

    private async Task AddNewTask()
    {
        ClearDiagram();
        var newTask = new DbTask
            {
                Name = $"New Task {_tasks.Count}",
            };
        await _serverTaskService.AddAsync(newTask);
        _tasks.Add(newTask);
        _selectedTask = _tasks.LastOrDefault();
    }

    private async Task DeleteTask()
    {
        if (_selectedTask != null)
        {
            ClearDiagram();
            await _serverTaskService.DeleteAsync(_selectedTask);
            _tasks.Remove(_selectedTask);
            _selectedTask = _tasks.FirstOrDefault();
            await LoadDiagram();
        }
    }

    private async Task SaveTask()
    {
        if (_selectedTask != null && _currentDiagram != null)
        {
            if (_selectedTask.TriggerSourceType == TargetType.Module)
            {
                _selectedTask.BackgroundServiceId = null;
                _selectedTask.BackgroundService = null;
                _selectedTask.DashboardEntityId = null;
                _selectedTask.DashboardEntity = null;

            }
            else if (_selectedTask.TriggerSourceType == TargetType.Service)
            {
                _selectedTask.ModuleId = null;
                _selectedTask.Module = null;
                _selectedTask.DashboardEntityId = null;
                _selectedTask.DashboardEntity = null;
            }
            else if (_selectedTask.TriggerSourceType == TargetType.DashboardEntity)
            {
                _selectedTask.ModuleId = null;
                _selectedTask.Module = null;
                _selectedTask.BackgroundServiceId = null;
                _selectedTask.BackgroundService = null;
            }
            // else if (_selectedTask.TriggerSourceType == TargetType.None)
            // {
            //     _selectedTask.ModuleId = null;
            //     _selectedTask.Module = null;
            //     _selectedTask.BackgroundServiceId = null;
            //     _selectedTask.BackgroundService = null;
            //     _selectedTask.DashboardEntityId = null;
            //     _selectedTask.DashboardEntity = null;
            // }
            await _serverTaskService.SaveDiagramAsync(_selectedTask, _currentDiagram);
        }
    }

    private async Task RunTask()
    {
        // var stopwatch = Stopwatch.StartNew();
        if (_selectedTask != null)
        {
            await _serverTaskService.ExecuteTaskAsync(_serverContextService, _selectedTask);
        }
        // stopwatch.Stop();
        // Debug.WriteLine($"Elapsed Time: {stopwatch.ElapsedMilliseconds} ms");
    }

    private void ChangeConditionType(NodeConditionType condition)
    {
        _selectedCondition = condition;
    }

    private void ChangeOperationType(NodeArrayOperationType condition)
    {
        _selectedOperation = condition;
    }

    private void AddNode(NodeType type)
    {
        if (_currentDiagram?.Container != null)
        {
            var x = (-_currentDiagram.Pan.X) + 40;
            var y = (-_currentDiagram.Pan.Y) + 75;

            var set = new HashSet<int>(_currentDiagram.Nodes.Select(item => item.Order));
            int smallestOrder = 1;
            while (set.Contains(smallestOrder))
            {
                smallestOrder++;
            }

            Blazor.Diagrams.Core.Geometry.Point point = new(x, y);

            if (type == NodeType.Condition)
            {
                _currentDiagram.Nodes.Add(new ConditionNode(_serverContextService, _selectedCondition, point) { Order = smallestOrder });
            }
            else if (type == NodeType.FromMessage)
            {
                _currentDiagram.Nodes.Add(new FromMessageNode(_serverContextService, point) { Order = smallestOrder });
            }
            else if (type == NodeType.DataDisplay)
            {
                _currentDiagram.Nodes.Add(new DataDisplayNode(_serverContextService, point) { Order = smallestOrder });
            }
            else if (type == NodeType.Value)
            {
                _currentDiagram.Nodes.Add(new ValueNode(_serverContextService, point) { Order = smallestOrder });
            }
            else if (type == NodeType.SendMessage)
            {
                _currentDiagram.Nodes.Add(new SendMessageNode(_serverContextService, point) { Order = smallestOrder });
            }
            else if (type == NodeType.ArrayOperation)
            {
                _currentDiagram.Nodes.Add(new ArrayOperationNode(_serverContextService, _selectedOperation, point) { Order = smallestOrder });
            }
            else if (type == NodeType.ArithmeticOperation)
            {
                _currentDiagram.Nodes.Add(new ArithmeticOperationNode(_serverContextService, _selectedArithmeticOperation, point) { Order = smallestOrder });
            }
            else if (type == NodeType.ConvertTo)
            {
                _currentDiagram.Nodes.Add(new ConvertToNode(_serverContextService, _selectedConvertTo , point) { Order = smallestOrder });
            }
        }
    }

    private async Task LoadDiagram()
    {
        if (_currentDiagram != null && _selectedTask != null)
        {
            var nodes = new List<DbTaskNode>();
            var links = await _serverTaskService.GetLinksAsync(_selectedTask);
            _selectedTask.Nodes = nodes;

            foreach (var link in links)
            {
                if (!nodes.Contains(link.Source))
                {
                    nodes.Add(link.Source);
                }
                if (!nodes.Contains(link.Target))
                {
                    nodes.Add(link.Target);
                }
            }

            foreach (var node in nodes)
            {
                if (node.Type == NodeType.Condition)
                {
                    _currentDiagram.Nodes.Add(new ConditionNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.FromMessage)
                {
                    _currentDiagram.Nodes.Add(new FromMessageNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.DataDisplay)
                {
                    _currentDiagram.Nodes.Add(new DataDisplayNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.Value)
                {
                    _currentDiagram.Nodes.Add(new ValueNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.SendMessage)
                {
                    _currentDiagram.Nodes.Add(new SendMessageNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.ArrayOperation)
                {
                    _currentDiagram.Nodes.Add(new ArrayOperationNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.ArithmeticOperation)
                {
                    _currentDiagram.Nodes.Add(new ArithmeticOperationNode(_serverContextService, node));
                }
                else if (node.Type == NodeType.ConvertTo)
                {
                    _currentDiagram.Nodes.Add(new ConvertToNode(_serverContextService, node));
                }
            }

            foreach (var link in links)
            {
                var source = _currentDiagram.Nodes.First(n => n.Order == link.Source.Order);
                var target = _currentDiagram.Nodes.First(n => n.Order == link.Target.Order);
                LinkModel? linkModel;
                TaskPort? sourcePort = null;
                TaskPort? targetPort = null;

                foreach (TaskPort port in source.Ports)
                {
                    if (port.Order == link.SourceOrder && port.Input == link.SourceInput)
                    {
                        sourcePort = port;
                        break;
                    }
                }

                foreach (TaskPort port in target.Ports)
                {
                    if (port.Order == link.TargetOrder && port.Input == link.TargetInput)
                    {
                        targetPort = port;
                        break;
                    }
                }
                if (sourcePort != null && targetPort != null)
                {
                    linkModel = new LinkModel(sourcePort, targetPort);
                    linkModel.Color = "var(--mud-palette-text-secondary)";
                    // if (!sourcePort.Data || !targetPort.Data)
                    // {
                    //     linkModel.Color = "var(--mud-palette-text-disabled)";
                    // }
                    // else
                    // {
                    //     linkModel.Color = "var(--mud-palette-text-secondary)";
                    // }
                    _currentDiagram.Links.Add(linkModel);
                }
            }
        }
    }
}