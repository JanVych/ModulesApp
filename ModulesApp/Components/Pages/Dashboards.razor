@using ModulesApp.Components.DashBoardEntities
@using ModulesApp.Models.Dasboards
@using ModulesApp.Models.Dasboards.Entities
@using ModulesApp.Services.Data

@inject DashboardService _dashBoardService

@implements IDisposable

@page "/"

<PageTitle>Dashboard</PageTitle>

<MudStack Justify="Justify.FlexStart">

</MudStack>

<MudGrid>
    @if (_dashboards == null || _selectedDashboard == null)
    {
        <MudItem xs="12">
            <div class="d-flex align-start justify-center mud-width-full">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </div>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Baseline" StretchItems="StretchItems.Middle">
                <div style="width: 85px"/>
                <div class="d-flex align-start justify-center mud-width-full">
                    <MudChipSet T="DbDashboard"
                                @bind-SelectedValue="_selectedDashboard"
                                Variant="Variant.Text"
                                SelectionMode="SelectionMode.SingleSelection"
                                Size="Size.Large"
                                AllClosable="@EditMode"
                                OnClose="DeleteDashBoard"
                                Color="Color.Primary">
                        @foreach (var d in _dashboards)
                        {
                            <MudChip Value="@d" Style="height: 60px" Icon="@d.IconString">
                                <MudText>@d.Name</MudText>
                            </MudChip>
                        }
                        @if (EditMode)
                        {
                            <MudChip Value="@("Add")"
                                     Style="height: 60px"
                                     Color="Color.Primary"
                                     Variant="Variant.Text"
                                     Size="Size.Large"
                                     Icon="@Icons.Material.Filled.Add"
                                     OnClick="AddNewDashboard" />
                        }
                    </MudChipSet>
                </div>
                <MudSwitch @bind-Value="@EditMode" Color="Color.Primary">Edit</MudSwitch>
            </MudStack>
        </MudItem>

        <MudItem xs="12">
            <div class="d-flex align-start justify-center flex-wrap gap-8">
                @foreach (var e in _selectedDashboard.Entities)
                {
                    if (e is DbBasicCardEntity be)
                    {
                        <BasicCardEntity EditMode="@EditMode" Entity="@be"
                                         DeleteButtonClick="DeleteDashBoardEntity" />
                    }
                    else if (e is DbDataListCardEntity de)
                    {
                        <DataListCardEntity EditMode="@EditMode" Entity="@de"
                                            DeleteButtonClick="DeleteDashBoardEntity" />
                    }
                }

                @if (EditMode)
                {
                    <div class="pa-8">
                        <MudStack AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h5">New Entity</MudText>
                            <MudSelect T="DashboardEntityType" Value="_newEntityType" Label="Type" ValueChanged="ChangeNewEntityType">
                                @foreach (DashboardEntityType type in Enum.GetValues(typeof(DashboardEntityType)))
                                {
                                    <MudSelectItem Value="type" />
                                }
                            </MudSelect>

                            @if (_newEntity is DbBasicCardEntity be)
                            {
                                <BasicCardEntity EditMode="true" Entity="@be" />
                            }
                            else if (_newEntity is DbDataListCardEntity de)
                            {
                                <DataListCardEntity EditMode="true" Entity="@de" />
                            }
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddDashBoardEntity">Add</MudButton>
                        </MudStack>
                    </div>
                }
            </div>
        </MudItem>
    }
</MudGrid>

@code
{
    private bool _editMode = false;
    private bool EditMode
    {
        get => _editMode;
        set
        {
            if (!value)
            {
                UpdateDashboard();
            }
            _editMode = value;
        }
    }
    private List<DbDashboard>? _dashboards;

    private DbDashboard? _selectedDashboard;

    private DashboardEntityType _newEntityType;
    private DbDashboardEntity _newEntity = new DbBasicCardEntity();

    protected override void OnInitialized()
    {
        _dashBoardService.DashboardEntityDataEvent += OnDashBoardEntityDataChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dashboards = await _dashBoardService.GetAllDashboardsAsync();
            if (_dashboards.Count == 0)
            {
                var home = new DbDashboard
                    {
                        Name = "Home",
                        IconString = Icons.Material.Filled.Home
                    };
                _dashBoardService.Add(home);
                _dashboards.Add(home);
            }
            _selectedDashboard = _dashboards.FirstOrDefault();
            StateHasChanged();
        }
    }

    private void AddNewDashboard()
    {
        if (_dashboards != null)
        {
            var newName = "New" + _dashboards.Count;
            var dashboard = new DbDashboard
                {
                    Name = newName,
                    IconString = Icons.Material.Filled.Pageview
                };
            _dashBoardService.Add(dashboard);
            _dashboards.Add(dashboard);
            _selectedDashboard = dashboard;
        }
    }

    private void DeleteDashBoard(MudChip<DbDashboard> chip)
    {
        if (_dashboards != null && chip.Value != null)
        {
            _dashBoardService.Delete(chip.Value);
            _dashboards.Remove(chip.Value);
            _selectedDashboard = _dashboards.FirstOrDefault();
        }
    }

    private void ChangeNewEntityType(DashboardEntityType type)
    {
        _newEntityType = type;
        _newEntity = type switch
        {
            DashboardEntityType.DataListCard => new DbDataListCardEntity(),
            _ => new DbBasicCardEntity()
        };
    }

    private void AddDashBoardEntity()
    {
        if (_selectedDashboard != null)
        {
            _newEntity.DashboardId = _selectedDashboard.Id;
            _dashBoardService.Add(_newEntity);
            _selectedDashboard.Entities.Add(_newEntity);
            ChangeNewEntityType(_newEntityType);
        }
    }

    private void DeleteDashBoardEntity(DbDashboardEntity entity)
    {
        if (_selectedDashboard != null)
        {
            _dashBoardService.Delete(entity);
            _selectedDashboard.Entities.Remove(entity);
            StateHasChanged();
        }
    }

    private void OnDashBoardEntityDataChanged(DbDashboardEntity entity)
    {
        if (_selectedDashboard != null)
        {
            var index = _selectedDashboard.Entities.FindIndex(e => e.Id == entity.Id);
            if (index >= 0)
            {
                _selectedDashboard.Entities[index] = entity;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    private void UpdateDashboard()
    {
        if (_selectedDashboard != null)
        {
            foreach(var e in _selectedDashboard.Entities)
            {
                _dashBoardService.Update(e);
            }
        }
    }

    public void Dispose()
    {
        _dashBoardService.DashboardEntityDataEvent -= OnDashBoardEntityDataChanged;
    }
}