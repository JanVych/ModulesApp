@using ModulesApp.Components.DashBoardEntities
@using ModulesApp.Models.Dasboards
@using ModulesApp.Services.Data

@inject DashboardService _dashBoardService

@implements IDisposable

@page "/"


<PageTitle>Dashboard</PageTitle>

<MudStack Justify="Justify.FlexStart">

</MudStack>

<MudGrid>
    @if (_dashboards == null || _selectedDashboard == null)
    {
        <MudItem xs="12">
            <div class="d-flex align-start justify-center mud-width-full">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </div>
        </MudItem>
    }
    else
    {
        <MudItem xs="11">
            <div class="d-flex align-start justify-center mud-width-full">
                <MudChipSet T="DbDashboard"
                @bind-SelectedValue="_selectedDashboard"
                Variant="Variant.Text"
                SelectionMode="SelectionMode.SingleSelection"
                Size="Size.Large"
                AllClosable="@_editMode"
                OnClose="DeleteDashBoard"
                Color="Color.Primary">
                    @foreach (var d in _dashboards)
                    {
                        <MudChip Value="@d" Style="height: 60px" Icon="@d.IconString">
                            <MudText>@d.Name</MudText>
                        </MudChip>
                    }
                    @if (_editMode)
                    {
                        <MudChip Value="@("Add")"
                        Style="height: 60px"
                        Color="Color.Primary"
                        Variant="Variant.Text"
                        Size="Size.Large"
                        Icon="@Icons.Material.Filled.Add"
                        OnClick="AddDashBoard" />
                    }
                </MudChipSet>
            </div>
        </MudItem>

        <MudItem xs="1" class="d-flex align-center justify-center mud-width-full">
            <MudSwitch @bind-Value="@_editMode" Color="Color.Primary">Edit</MudSwitch>
        </MudItem>

        <MudItem xs="12">
            <div class="d-flex align-content-start flex-wrap gap-8">
                @foreach (var e in _selectedDashboard.Entities)
                {
                    if (e.Type == DashboardEntityType.BasicCard)
                    {
                        <BasicCardEntity EditMode="@_editMode" Entity="@e" DeleteButtonClick="DeleteDashBoardEntity" />
                    }
                }

                @if (_editMode)
                {
                    <MudCard Style="width: 300px; height: 300px;">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">Add</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudTextField @bind-Value="_newEntityName"
                            Label="Name"
                            Variant="Variant.Text"
                            Error="@_showNewEntityError"
                            ErrorText="the field is required!" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text"
                            Color="Color.Primary"
                            OnClick="AddDashBoardEntity">
                                Confirm
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            </div>
        </MudItem>
    }
</MudGrid>

@code
{
    private bool _editMode = false;
    private List<DbDashboard>? _dashboards;

    private DbDashboard? _selectedDashboard;

    private string? _newEntityName;
    private bool _showNewEntityError = false;

    protected override void OnInitialized()
    {
        _dashBoardService.DashboardEntityDataEvent += OnDashBoardEntityDataChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dashboards = await _dashBoardService.GetAllDashboardsAync();
            if(_dashboards.Count == 0)
            {
                var home = new DbDashboard
                {
                    Name = "Home",
                    IconString = Icons.Material.Filled.Home
                };
                _dashBoardService.Add(home);
                _dashboards.Add(home);
            }
            _selectedDashboard = _dashboards.FirstOrDefault();
            StateHasChanged();
        }
    }

    private void AddDashBoard()
    {
        if (_dashboards != null)
        {
            var newName = "New" + _dashboards.Count;
            var dashboard = new DbDashboard
                {
                    Name = newName,
                    IconString = Icons.Material.Filled.Pageview
                };
            _dashBoardService.Add(dashboard);
            _dashboards.Add(dashboard);
            _selectedDashboard = dashboard;
        }
    }

    private void DeleteDashBoard(MudChip<DbDashboard> chip)
    {
        if (_dashboards != null && chip.Value != null)
        {
            _dashBoardService.Delete(chip.Value);
            _dashboards.Remove(chip.Value);
            _selectedDashboard = _dashboards.FirstOrDefault();
        }
    }

    private void AddDashBoardEntity()
    {
        if (_selectedDashboard != null)
        {
            if (!string.IsNullOrEmpty(_newEntityName))
            {
                var entity = new DbDashboardEntity
                    {
                        DashboardId = _selectedDashboard.Id,
                        Name = _newEntityName,
                    };

                _dashBoardService.Add(entity);
                _selectedDashboard.Entities.Add(entity);

                _showNewEntityError = false;
                _newEntityName = string.Empty;
            }
            else
            {
                _showNewEntityError = true;
            }
        }
    }

    private void DeleteDashBoardEntity(DbDashboardEntity entity)
    {
        if (_selectedDashboard != null)
        {
            _dashBoardService.Delete(entity);
            _selectedDashboard.Entities.Remove(entity);
            StateHasChanged();
        }
    }

    private void  OnDashBoardEntityDataChanged(long entityId, Dictionary<string, object> data)
    {
        if(_selectedDashboard != null)
        {
            var entity = _selectedDashboard.Entities.FirstOrDefault(c => c.Id == entityId);
            if (entity != null)
            {
                entity.Data = data;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    public void Dispose()
    {
        _dashBoardService.DashboardEntityDataEvent -= OnDashBoardEntityDataChanged;
    }
}