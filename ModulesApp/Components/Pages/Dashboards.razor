@using ModulesApp.Components.DashBoardEntities
@using ModulesApp.Components.Dialog
@using ModulesApp.Models.Dasboards
@using ModulesApp.Models.Dasboards.Entities
@using ModulesApp.Services
@using ModulesApp.Services.Data

@inject DashboardService _dashBoardService
@inject ContextService _serverContextService
@inject IDialogService DialogService
@inject NotifyService _notifyService

@implements IDisposable

@page "/"
@attribute [Authorize]

<PageTitle>Dashboard</PageTitle>

<MudGrid Spacing="0">
    @if (_dashboards == null || _selectedDashboard == null)
    {
        <MudItem xs="12">
            <div class="d-flex align-start justify-center mud-width-full">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </div>
        </MudItem>
    }
    else
    {
        <MudItem xs="12" Class="mb-2">
            <div class="d-flex align-start justify-center mud-width-full">
                <MudChipSet T="DbDashboard"
                            @bind-SelectedValue="_selectedDashboard"
                            Variant="Variant.Text"
                            SelectionMode="SelectionMode.SingleSelection"
                            Size="Size.Large"
                            AllClosable="@EditMode"
                            OnClose="DeleteDashBoard"
                            Color="Color.Primary">
                    @foreach (var d in _dashboards)
                    {
                        <MudChip Value="@d" Style="height: 50px" Icon="@d.IconString">
                            <MudText>@d.Name</MudText>
                        </MudChip>
                    }
                    @if (EditMode)
                    {
                        <MudChip Value="@("Add")"
                                 Style="height: 50px"
                                 Color="Color.Primary"
                                 Variant="Variant.Text"
                                 Size="Size.Large"
                                 Icon="@Icons.Material.Filled.Add"
                                 OnClick="OpenDashboardDialog" />
                    }
                </MudChipSet>
            </div>
            
        </MudItem>

        <MudItem xs="12">
            <div class="d-flex align-start justify-center flex-wrap gap-4">
                @foreach (var e in _selectedDashboard.Entities)
                {
                    if(e.ParentEntityId == null)
                    {
                        @if (e is DbDataListEntity dle)
                        {
                            <DataListEntity EditMode="@EditMode" Entity="@dle"
                                            DeleteButtonClick="DeleteDashBoardEntity" />
                        }
                        else if (e is DbSwitchEntity se)
                        {
                            <SwitchEntity EditMode="@EditMode" Entity="@se"
                                          DeleteButtonClick="DeleteDashBoardEntity"
                                          ServerContextService="_serverContextService" />
                        }
                        else if (e is DbTemperaturesListEntity tle)
                        {
                            <TemperaturesListEntity EditMode="@EditMode" Entity="@tle"
                                                    DeleteButtonClick="DeleteDashBoardEntity"
                                                    ServerContextService="_serverContextService" />
                        }
                        else if (e is DbButtonEntity be)
                        {
                            <ButtonEntity EditMode="@EditMode" Entity="@be"
                                          DeleteButtonClick="DeleteDashBoardEntity"
                                          ServerContextService="_serverContextService" />
                        }
                        else if (e is DbValueSetterEntity vse)
                        {
                            <ValueSetterEntity EditMode="@EditMode" Entity="@vse"
                                               DeleteButtonClick="DeleteDashBoardEntity"
                                               ServerContextService="_serverContextService" />
                        }
                        else if (e is DbLineChartEntity lce)
                        {
                            <LineChartEntity EditMode="@EditMode" Entity="@lce"
                                             DeleteButtonClick="DeleteDashBoardEntity" />
                        }
                        else if (e is DbKeyValueEntity kve)
                        {
                            <KeyValueEntity EditMode="@EditMode" Entity="@kve"
                                            DeleteButtonClick="DeleteDashBoardEntity" />
                        }
                        else if (e is DbFrameEntity fe)
                        {
                            <FrameEntity EditMode="@EditMode" Entity="@fe"
                                         ServerContextService="_serverContextService"
                                         DeleteButtonClick="DeleteDashBoardEntity"
                                         AddButtonClick="AddDashBoardEntity"/>
                        }
                    }
                }
            </div>
        </MudItem>
    }
</MudGrid>

@if(EditMode)
{
    <MudFab StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Secondary" Style="position: fixed; bottom: 16px; right: 16px;" OnClick="() =>ChangeEditMode(false)"/>
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Style="position: fixed; bottom: 16px; right: 88px;" OnClick="OpenAddEntityDialog" />
}
else
{
    <MudFab StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" Style="position: fixed; bottom: 16px; right: 16px;" OnClick="() => ChangeEditMode(true)" />
}


@code
{
    private bool _editMode = false;
    private bool EditMode { get; set; } = false;
    private List<DbDashboard>? _dashboards;

    private DbDashboard? _selectedDashboard;

    protected override void OnInitialized()
    {
        _notifyService.DashboardEntityDataEvent += OnDashBoardEntityDataChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dashboards = await _dashBoardService.GetAllDashboardsAsync();
            if (_dashboards.Count == 0)
            {
                var home = new DbDashboard
                    {
                        Name = "Home",
                        IconString = Icons.Material.Filled.Home
                    };
                _dashBoardService.AddDashBoard(home);
                _dashboards.Add(home);
            }
            _selectedDashboard = _dashboards.FirstOrDefault();
            StateHasChanged();
        }
    }

    private void DeleteDashBoard(MudChip<DbDashboard> chip)
    {
        if (_dashboards != null && chip.Value != null)
        {
            _dashBoardService.DeleteDashboard(chip.Value);
            _dashboards.Remove(chip.Value);
            _selectedDashboard = _dashboards.FirstOrDefault();
        }
    }

    private void DeleteDashBoardEntity(DbDashboardEntity entity)
    {
        if (_selectedDashboard != null)
        {
            _dashBoardService.DeleteEntity(entity);
            _selectedDashboard.Entities.Remove(entity);
            StateHasChanged();
        }
    }

    private void OnDashBoardEntityDataChanged((long EntityId, string Key, object? Value) message)
    {
        if (_selectedDashboard != null && !_editMode)
        {
            // var entity = _selectedDashboard.Entities.FirstOrDefault(e => e.Id == message.EntityId);
            var entity = _dashboards?.SelectMany(d => d.Entities).FirstOrDefault(e => e.Id == message.EntityId);
            if(entity != null)
            {
                entity.UpdateState(message.Key, message.Value);
            }

            // if(entity.ParentEntityId != null)
            // {
            //     var parent = _selectedDashboard.Entities.FirstOrDefault(e => e.Id == entity.ParentEntityId);
            //     parent?.ReplaceChildren(entity);
            // }
            // _selectedDashboard.ReplaceEntity(entity);
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task UpdateDashboard()
    {
        if (_selectedDashboard != null)
        {
            await _dashBoardService.UpdateEntitiesAsync(_selectedDashboard.Entities);
        }
    }

    private void AddDashBoardEntity(DbDashboardEntity entity)
    {
        if (_selectedDashboard != null)
        {
            entity.DashboardId = _selectedDashboard.Id;
            _dashBoardService.AddEntity(entity);
            _selectedDashboard.Entities.Add(entity);
        }
    }

    private async Task OpenAddEntityDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dRef = await DialogService.ShowAsync<DashboardAddEntityDialog>("Simple Dialog", options);
        var result = await dRef.Result;
        if (result is not null && !result.Canceled)
        {
            if (result.Data is DbDashboardEntity entity)
            {
                AddDashBoardEntity(entity);
            }
        }
    }

    private async Task OpenDashboardDialog() =>
        await OpenDashboardDialog(new DbDashboard
        {
            Name = "New Dashboard",
            IconString = Icons.Material.Filled.Home
        });

    private async Task OpenDashboardDialog(DbDashboard dashboard)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var parameters = new DialogParameters
        {
            { "Dashboard", dashboard }
        };

        var dRef = await DialogService.ShowAsync<DashboardDialog>("Add Entity", parameters, options);
        var result = await dRef.Result;

        if (result is not null && !result.Canceled)
        {
            if (result.Data is DbDashboard entity)
            {
                _dashBoardService.AddDashBoard(entity);
                _dashboards?.Add(entity);
                _selectedDashboard = entity;
            }
        }
    }

    private async Task ChangeEditMode(bool value)
    {
        if (!value && _selectedDashboard != null)
        {
            await UpdateDashboard();
        }
        EditMode = value;
    }

    public void Dispose()
    {
        _notifyService.DashboardEntityDataEvent -= OnDashBoardEntityDataChanged;
    }
}