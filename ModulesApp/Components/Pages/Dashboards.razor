@using ModulesApp.Components.DashBoardEntities
@using ModulesApp.Components.Dialog
@using ModulesApp.Models.Dasboards
@using ModulesApp.Models.Dasboards.Entities
@using ModulesApp.Services
@using ModulesApp.Services.Data

@inject DashboardService _dashBoardService
@inject ContextService _serverContextService
@inject IDialogService DialogService
@inject NotifyService _notifyService

@implements IDisposable

@page "/"
@attribute [Authorize]

<PageTitle>Dashboard</PageTitle>

<MudGrid>
    @if (_dashboards == null || _selectedDashboard == null)
    {
        <MudItem xs="12">
            <div class="d-flex align-start justify-center mud-width-full">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </div>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Baseline" StretchItems="StretchItems.Middle">
                <div style="width: 85px"/>
                <div class="d-flex align-start justify-center mud-width-full">
                    <MudChipSet T="DbDashboard"
                                @bind-SelectedValue="_selectedDashboard"
                                Variant="Variant.Text"
                                SelectionMode="SelectionMode.SingleSelection"
                                Size="Size.Large"
                                AllClosable="@EditMode"
                                OnClose="DeleteDashBoard"
                                Color="Color.Primary">
                        @foreach (var d in _dashboards)
                        {
                            <MudChip Value="@d" Style="height: 60px" Icon="@d.IconString">
                                <MudText>@d.Name</MudText>
                            </MudChip>
                        }
                        @if (EditMode)
                        {
                            <MudChip Value="@("Add")"
                                     Style="height: 60px"
                                     Color="Color.Primary"
                                     Variant="Variant.Text"
                                     Size="Size.Large"
                                     Icon="@Icons.Material.Filled.Add"
                                     OnClick="AddNewDashboard" />
                        }
                    </MudChipSet>
                </div>
                <MudSwitch @bind-Value="@EditMode" Color="Color.Primary">Edit</MudSwitch>
            </MudStack>
        </MudItem>

        <MudItem xs="12">
            <div class="d-flex align-start justify-center flex-wrap gap-8">
                @foreach (var e in _selectedDashboard.Entities)
                {
                    if (e is DbBasicCardEntity bce)
                    {
                        <BasicCardEntity EditMode="@EditMode" Entity="@bce"
                                         DeleteButtonClick="DeleteDashBoardEntity" />
                    }
                    else if (e is DbDataListEntity dle)
                    {
                        <DataListEntity EditMode="@EditMode" Entity="@dle"
                                            DeleteButtonClick="DeleteDashBoardEntity" />
                    }
                    else if (e is DbSwitchEntity se)
                    {
                        <SwitchEntity EditMode="@EditMode" Entity="@se" 
                                            DeleteButtonClick="DeleteDashBoardEntity"
                                            ServerContextService="_serverContextService"/>
                    }
                    else if(e is DbTemperaturesListEntity tle)
                    {
                        <TemperaturesListEntity EditMode="@EditMode" Entity="@tle"
                                            DeleteButtonClick="DeleteDashBoardEntity"
                                            ServerContextService="_serverContextService"/>
                    }
                    else if(e is DbButtonEntity be)
                    {
                        <ButtonEntity EditMode="@EditMode" Entity="@be"
                                            DeleteButtonClick="DeleteDashBoardEntity"
                                            ServerContextService="_serverContextService"/>
                    }
                    else if (e is DbValueSetterEntity vse)
                    {
                        <ValueSetterEntity EditMode="@EditMode" Entity="@vse"
                                           DeleteButtonClick="DeleteDashBoardEntity"
                                           ServerContextService="_serverContextService" />
                    }
                }

                @if (EditMode)
                {
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddEntityDialog" />
                }
            </div>
        </MudItem>
    }
</MudGrid>

@code
{
    private bool _editMode = false;
    private bool EditMode
    {
        get => _editMode;
        set
        {
            if (!value)
            {
                UpdateDashboard();
            }
            _editMode = value;
        }
    }
    private List<DbDashboard>? _dashboards;

    private DbDashboard? _selectedDashboard;

    protected override void OnInitialized()
    {
        _notifyService.DashboardEntityDataEvent += OnDashBoardEntityDataChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dashboards = await _dashBoardService.GetAllDashboardsAsync();
            if (_dashboards.Count == 0)
            {
                var home = new DbDashboard
                    {
                        Name = "Home",
                        IconString = Icons.Material.Filled.Home
                    };
                _dashBoardService.Add(home);
                _dashboards.Add(home);
            }
            _selectedDashboard = _dashboards.FirstOrDefault();
            StateHasChanged();
        }
    }

    private void AddNewDashboard()
    {
        if (_dashboards != null)
        {
            var newName = "New" + _dashboards.Count;
            var dashboard = new DbDashboard
                {
                    Name = newName,
                    IconString = Icons.Material.Filled.Pageview
                };
            _dashBoardService.Add(dashboard);
            _dashboards.Add(dashboard);
            _selectedDashboard = dashboard;
        }
    }

    private void DeleteDashBoard(MudChip<DbDashboard> chip)
    {
        if (_dashboards != null && chip.Value != null)
        {
            _dashBoardService.Delete(chip.Value);
            _dashboards.Remove(chip.Value);
            _selectedDashboard = _dashboards.FirstOrDefault();
        }
    }

    private void DeleteDashBoardEntity(DbDashboardEntity entity)
    {
        if (_selectedDashboard != null)
        {
            _dashBoardService.Delete(entity);
            _selectedDashboard.Entities.Remove(entity);
            StateHasChanged();
        }
    }

    private void OnDashBoardEntityDataChanged(DbDashboardEntity entity)
    {
        if (_selectedDashboard != null && !_editMode)
        {
            var index = _selectedDashboard.Entities.FindIndex(e => e.Id == entity.Id);
            if (index >= 0)
            {
                _selectedDashboard.Entities[index] = entity;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    private void UpdateDashboard()
    {
        if (_selectedDashboard != null)
        {
            foreach(var e in _selectedDashboard.Entities)
            {
                _dashBoardService.Update(e);
            }
        }
    }

    private void AddDashBoardEntity(DbDashboardEntity entity)
    {
        if (_selectedDashboard != null)
        {
            entity.DashboardId = _selectedDashboard.Id;
            _dashBoardService.Add(entity);
            _selectedDashboard.Entities.Add(entity);
        }
    }

    private async Task OpenAddEntityDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dRef = await DialogService.ShowAsync<DashboardAddEntityDialog>("Simple Dialog", options);
        var result = await dRef.Result;
        if (result is not null && !result.Canceled)
        {
            if (result.Data is DbDashboardEntity entity)
            {
                AddDashBoardEntity(entity);
            }
        }
    }

    public void Dispose()
    {
        _notifyService.DashboardEntityDataEvent -= OnDashBoardEntityDataChanged;
    }
}