@using ModulesApp.Components.BackgroundServices
@using ModulesApp.Models
@using ModulesApp.Models.BackgroundServices
@using ModulesApp.Services
@using ModulesApp.Services.Data
@using System.Text.Json

@inject NavigationManager _navigationManager
@inject BackgroundServiceManager _backgroundServiceManager
@inject BackgroundServiceService _backgroundServiceService
@inject NotifyService _notifyService

@implements IDisposable

@page "/services/detail"
@attribute [Authorize]

<PageTitle>Service Dteail</PageTitle>

<div>
    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" >
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Size="Size.Large" OnClick="GoBack" />
            @if (_service != null)
            {
                <MudText Typo="Typo.h4">@_service.Name</MudText>
            }
        </MudStack>
        
        <MudStack Row=true>
            @if (_service?.Status == BackgroundServiceStatus.Active)
            {
                <MudIconButton Icon="@Icons.Material.Filled.PauseCircleFilled"
                               Color="Color.Primary"  Size="Size.Medium"
                               OnClick="PauseService">
                </MudIconButton>
            }
            else if (_service?.Status == BackgroundServiceStatus.Paused)
            {
                <MudIconButton Icon="@Icons.Material.Filled.PlayCircleFilled"
                               Color="Color.Primary" Size="Size.Medium"
                               OnClick="StartService">
                </MudIconButton>
            }

            <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Primary" Size="Size.Medium" OnClick="SaveService"
                           Disabled="(_hasError || _service?.Status != BackgroundServiceStatus.Paused)" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" Size="Size.Medium" OnClick="DeleteService" />
        </MudStack>

        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Large" OnClick="UpdateData" />
    </MudStack>

    <MudDivider Class="mb-2" />

    @if (_service == null)
    {
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    }
    else
    {
        <MudStack Row="true" Wrap="Wrap.Wrap" Justify="Justify.SpaceEvenly" StretchItems="StretchItems.All">
            <MudPaper Class="pa-4" Elevation="0">

                <MudText Typo="Typo.h5">Service detail</MudText>
                <MudDivider Class="mt-2" />

                <MudSimpleTable Class="px-4 mb-2" Bordered="false" Elevation="0">
                    <tbody>
                        <tr>
                            <td>Id</td>
                            <td>@_service.Id</td>
                        </tr>
                        <tr>
                            <td>Name</td>
                            <td>
                                <MudTextField @bind-Value="_service.Name" Variant="Variant.Text" Margin="Margin.Dense"
                                              Disabled="_service.Status != BackgroundServiceStatus.Paused" Style="max-width:400px" />
                            </td>
                        </tr>
                        <tr>
                            <td>Type</td>
                            <td>@_service.Type</td>
                        </tr>
                        <tr>
                            <td>Cron timer</td>
                            <td>
                                <MudTextField @bind-Value="_service.CronExpression" Variant="Variant.Text" Margin="Margin.Dense"
                                              Disabled="_service.Status != BackgroundServiceStatus.Paused" Style="max-width:400px" />
                            </td>
                        </tr>
                        <tr>
                            <td>Status</td>
                            <td>
                                <MudChip T="string" Color="@_service.GetStatusColor()">
                                    @_service.Status
                                </MudChip>
                            </td>
                        </tr>
                    </tbody>
                </MudSimpleTable>
            </MudPaper>

            @if (_service.Type == BackgroundServiceType.Goodwe)
            {
                <MudPaper Class="pa-4" Elevation="0">
                    <GoodweServiceConfiguration Service="_service" HasError=_hasError />
                </MudPaper>
            }
            else if (_service.Type == BackgroundServiceType.Http)
            {
                <MudPaper Class="pa-4" Elevation="0">
                    <HttpServiceConfiguration Service="_service" HasError="_hasError" />
                </MudPaper>
            }

            <MudPaper Class="pa-4" Elevation="0">
                <MudText Typo="Typo.h5">Message data</MudText>
                <MudDivider Class="mt-2" />
                <MudSimpleTable Class="px-4 mb-2" Bordered="false" Elevation="0">
                    <tbody>
                        @foreach (var item in _service.MessageData)
                        {
                            <tr>
                                <td>@item.Key</td>
                                <td>@item.Value</td>
                                <td>@GenerateValueTypeText(item.Value)</td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            </MudPaper>
            <MudPaper Class="pa-4" Elevation="0">
                <MudText Typo="Typo.h5">Server tasks</MudText>
                <MudDivider Class="mt-2" />
                <MudSimpleTable Class="px-4 mb-2" Bordered="false" Elevation="0">
                    <tbody>
                        @foreach (var item in _service.ServerTasks)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>@item.Type</td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            </MudPaper>
            <MudPaper Class="pa-4" Elevation="0">
                <MudText Typo="Typo.h5">Pending actions</MudText>
                <MudDivider Class="mt-2" />
                <MudSimpleTable Class="px-4 mb-2" Bordered="false" Elevation="0">
                    <tbody>
                        @foreach (var item in _service.Actions)
                        {
                            <tr>
                                <td>@item.Key</td>
                                <td>@item.Value</td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            </MudPaper>
        </MudStack>
    }
</div>


@code
{
    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public long ServiceId { get; set; }

    private DbBackgroundService? _service;
    private double _intervalSeconds;

    public bool _hasError;

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
        _notifyService.BackgroundServiceChangedEvent += OnDataChanged;
    }

    private async void OnDataChanged()
    {
        await UpdateData();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateData()
    {
        _service = await _backgroundServiceService.GetAsync(ServiceId);
        // if(_service is not null)
        // {
        //     _intervalSeconds = _service.Interval.TotalSeconds;
        // }
    }

    private void GoBack()
    {
        _navigationManager.NavigateTo("/services");
    }

    private string GenerateValueTypeText(object? value)
    {
        if(value == null)
        {
            return "null";
        }
        if (value is JsonElement jsonElement)
        {
            return jsonElement.ValueKind.ToString();
        }
        return value.GetType().Name;
    }

    private async Task SaveService()
    {
        if (_service is not null)
        {
            await _backgroundServiceManager.UpdateServiceAsync(_service);
        }
    }

    private async Task StartService()
    {
        if (_service != null && _service.Status == BackgroundServiceStatus.Paused)
        {
            await _backgroundServiceManager.StartServiceAsync(_service);
        }
    }

    private async Task PauseService()
    {
        if (_service != null && _service.Status == BackgroundServiceStatus.Active)
        {
            await _backgroundServiceManager.StopServiceAsync(_service);
        }
    }

    private async Task DeleteService()
    {
        if (_service != null)
        {
            await _backgroundServiceManager.DeleteServiceAsync(_service);
            _navigationManager.NavigateTo("/services");
        }
    }

    public void Dispose()
    {
        _notifyService.BackgroundServiceChangedEvent -= OnDataChanged;
    }
}
