@using ModulesApp.Models
@using ModulesApp.Models.BackgroundServices
@using ModulesApp.Services
@using ModulesApp.Services.Data
@using System.Text.Json

@inject NavigationManager _navigationManager
@inject BackgroundServiceManager _backgroundServiceManager
@inject BackgroundServiceService _backgroundServiceService

@implements IDisposable

@page "/services/detail"

<PageTitle>Service Dteail</PageTitle>

<div>
    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Size="Size.Large" OnClick="GoBack" />
            @if (_service is not null)
            {
                <MudText Typo="Typo.h4">@_service.Name</MudText>
            }
        </MudStack>
        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Large" OnClick="UpdateData" />
    </MudStack>

    <MudDivider Class="mb-2" />

    @if (_service is null)
    {
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    }
    else
    {
        <MudStack Row="true" Wrap="Wrap.Wrap" Justify="Justify.SpaceEvenly" StretchItems="StretchItems.All">
            <div>
                <MudPaper Class="px-4 pt-4 pb-2" Elevation="0">
                    <MudText Typo="Typo.h5">Module detail</MudText>
                    <MudDivider Class="mt-2" />
                </MudPaper>
                <MudSimpleTable Class="px-4 mb-2" Bordered="false" Elevation="0">
                    <tbody>
                        <tr>
                            <td>Id</td>
                            <td>@_service.Id</td>
                        </tr>
                        <tr>
                            <td>Name</td>
                            <td>
                                <MudStack Row="true" AlignItems="AlignItems.Baseline">
                                    <MudTextField @bind-Value="_service.Name" Variant="Variant.Text" Margin="Margin.Dense" 
                                    Disabled="_service.Status != BackgroundServiceStatus.Stopped"/>
                                    <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="SaveService" />
                                </MudStack>
                            </td>
                        </tr>
                        <tr>
                            <td>Type</td>
                            <td>@_service.Type</td>
                        </tr>
                        <tr>
                            <td>Status</td>
                            <td>
                                <MudChip T="string" Color="@_service.GetStatusColor()">
                                    @_service.Status
                                </MudChip>
                            </td>
                        </tr>
                        <tr>
                            <td>Last run</td>
                            <td>@_service.LastRun.ToString()</td>
                        </tr>
                        <tr>
                            <td>Interval</td>
                            <MudStack Row="true" AlignItems="AlignItems.Baseline">
                                <MudNumericField @bind-Value="_intervalSeconds" Variant="Variant.Text" Margin="Margin.Dense" Min="5" 
                                Disabled="_service.Status != BackgroundServiceStatus.Stopped" />
                                <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="SaveService" />
                            </MudStack>
                        </tr>
                    </tbody>
                </MudSimpleTable>
            </div>
            <div>
                <MudPaper Class="px-4 pt-4 pb-2" Elevation="0">
                    <MudText Typo="Typo.h5">Message data</MudText>
                    <MudDivider Class="mt-2" />
                </MudPaper>
                <MudSimpleTable Class="px-4 mb-2" Bordered="false" Elevation="0">
                    <tbody>
                        @foreach (var item in _service.Data)
                        {
                            <tr>
                                <td>@item.Key</td>
                                <td>@item.Value</td>
                                <td>@GenerateValueTypeText(item.Value)</td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            </div>
            <div>
                <MudPaper Class="px-4 pt-4 pb-2" Elevation="0">
                    <MudText Typo="Typo.h5">Server tasks</MudText>
                    <MudDivider Class="mt-2" />
                </MudPaper>
                <MudSimpleTable Class="px-4 mb-2" Bordered="false" Elevation="0">
                    <tbody>
                        @foreach (var item in _service.ServerTasks)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>@item.Type</td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            </div>
            <div>
                <MudPaper Class="px-4 pt-4 pb-2" Elevation="0">
                    <MudText Typo="Typo.h5">Pending actions</MudText>
                    <MudDivider Class="mt-2" />
                </MudPaper>
                <MudSimpleTable Class="px-4 mb-2" Bordered="false" Elevation="0">
                    <tbody>
                        @foreach (var item in _service.Actions)
                        {
                            <tr>
                                <td>@item.Key</td>
                                <td>@item.Value</td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            </div>
        </MudStack>
    }
</div>


@code
{
    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public long ServiceId { get; set; }

    private DbBackgroundService? _service;
    private double _intervalSeconds;


    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
        _backgroundServiceService.BackgroundServiceChangedEvent += OnDataChanged;
    }

    private async void OnDataChanged()
    {
        await UpdateData();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateData()
    {
        _service = await _backgroundServiceService.GetAsync(ServiceId);
        if(_service is not null)
        {
            _intervalSeconds = _service.Interval.TotalSeconds;
        }
    }

    private void GoBack()
    {
        _navigationManager.NavigateTo("/services");
    }

    private string GenerateValueTypeText(object value)
    {
        if (value is JsonElement jsonElement)
        {
            return jsonElement.ValueKind.ToString();
        }
        return value.GetType().Name;
    }

    private async Task SaveService()
    {
        if (_service is not null)
        {
            _service.Interval = TimeSpan.FromSeconds(_intervalSeconds);
            await _backgroundServiceManager.UpdateServiceAsync(_service);
        }
    }

    public void Dispose()
    {
        _backgroundServiceService.BackgroundServiceChangedEvent -= OnDataChanged;
    }
}
