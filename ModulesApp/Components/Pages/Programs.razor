@using BlazorMonaco.Editor
@using ModulesApp.Models
@using ModulesApp.Models.ModulesPrograms
@using ModulesApp.Services
@using ModulesApp.Services.Data
@using System.Diagnostics

@inject ModuleProgramManager _moduleprogramManager
@inject ModuleProgramService _moduleProgramService
@inject ContextService _serverContextService
@inject NavigationManager _navigationManager

@page "/programs"
@attribute [Authorize]

<PageTitle>Programs</PageTitle>

<div class="d-flex flex-column flex-grow-1 gap-1" style="height:100%;">
    <MudPaper Class="d-flex justify-space-between align-content-center px-2">
        <MudTooltip Text="@(_showProgramsList ? "Hide programs" : "Show programs")">
            <MudToggleIconButton Icon="@Icons.Material.Filled.List"
                                 Color="@Color.Primary"
                                 ToggledIcon="@Icons.Material.Filled.List"
                                 ToggledColor="@Color.Default"
                                 @bind-Toggled="_showProgramsList" />
        </MudTooltip>

        <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
                <MudText Typo="Typo.h6" Class="align-self-center">
                    @_selectedProgram?.Name
                </MudText>
        </MudHidden>

        <MudStack Row=true Spacing="2">
            <MudTooltip Text="Save">
                <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="@SaveProgram" />
            </MudTooltip>
            <MudTooltip Text="Reload">
                <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Primary" OnClick="ReloadProgram" />
            </MudTooltip>
            <MudTooltip Text="Delete">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="@DeleteProgram" />
            </MudTooltip>
        </MudStack>

        <MudStack Row=true Spacing="2">
            <MudTooltip Text="Build">
                <MudIconButton Icon="@Icons.Material.Filled.Build" Color="@Color.Primary" OnClick="BuilProgram" />
            </MudTooltip>
            <MudTooltip Text="Clean">
                <MudIconButton Icon="@Icons.Material.Filled.Wash" Color="@Color.Primary" OnClick="CleanProgram" />
            </MudTooltip>
        </MudStack>

        <MudTooltip Text="@(_showProgramSettings ? "Hide settings" : "Show settings")">
            <MudToggleIconButton Icon="@Icons.Material.Filled.List"
                                 Color="@Color.Primary"
                                 ToggledIcon="@Icons.Material.Filled.List"
                                 ToggledColor="@Color.Default"
                                 @bind-Toggled="_showProgramSettings" />
        </MudTooltip>

    </MudPaper>

    <div class="d-flex align-stretch flex-grow-1 overflow-y-auto gap-1">
        @if(_showProgramsList)
        {
            <MudPaper Class="d-flex flex-column gap-2 pa-2" Style="height: 100%; min-width:250px; max-width:250px" Elevation="1">
                <div class="d-flex justify-space-between align-content-center">
                    <MudText Class="mx-4 align-self-center" Typo="Typo.h5">Programs</MudText>
                    <MudTooltip Text="Add">
                        <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Primary" OnClick="@AddNewProgram" />
                    </MudTooltip>
                </div>
                <MudDivider Class="flex-grow-0 " />
                <MudList T="DbModuleProgram" SelectedValue="_selectedProgram" SelectedValueChanged="SelectedProgramChanged" Class="flex-grow-1 overflow-y-auto ">
                    @foreach (var p in _programs)
                    {
                        <MudListItem Class="py-0" Value="p">@p.Name</MudListItem>
                    }
                </MudList>
            </MudPaper>
        }

        <div class="d-flex flex-column flex-grow-1 gap-1">
            @if (_selectedProgram != null)
            {
                <MudTabs KeepPanelsAlive="false" @ref=_tabs ActivePanelIndexChanged="ActivePanelIndexChanged" Class="d-flex flex-column flex-grow-1 gap-1">
                    @if (_selectedProgram?.Files == null)
                    {
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Style="height: 100%;" />
                    }
                    else
                    {
                        @foreach (var f in _selectedProgram.Files)
                        {
                            <MudTabPanel Text="@f.Name" ShowCloseIcon=false Style="height: 100%;">
                                <StandaloneCodeEditor @ref=_editor ConstructionOptions="CreateEditorConstructionOptions(f)" />
                            </MudTabPanel>
                        }
                    }
                </MudTabs>
                @if (_showOutput)
                {
                    <MudPaper Class="flex-grow-0 relative" Style="height:250px; ">
                        <textarea readonly class="ma-2" style="width: 98%; height:90%; background-color: transparent; color: var(--mud-palette-text-primary); outline: none; resize: none;">
                        @_outputText
                        </textarea>
                        <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Secondary" OnClick="() => _showOutput = false"
                                       Class="absolute my-2" Style="right:40px" />
                        <MudIconButton Icon="@Icons.Material.Filled.CleaningServices" Color="Color.Primary" OnClick="() => _outputText = string.Empty"
                                       Class="absolute my-2" Style="right:88px" />
                    </MudPaper>
                }
            }
            else
            {
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="100%" />                
            }
        </div>
        
        @if(_showProgramSettings && _selectedProgram != null)
        {
            <MudPaper Class="d-flex flex-column gap-2 pa-2" Style="height: 100%; min-width:250px; max-width:250px" Elevation="1">
                <MudText Class="mx-4" Typo="Typo.h5">Settings</MudText>
                <MudDivider Class="flex-grow-0 " />

                <MudTextField @bind-Value="_selectedProgram.Name" Label="Name" Variant="Variant.Text" Class="flex-grow-0 " />

                <MudTextField @bind-Value="_selectedProgram.Firmware.Name" Label="Firmware version" Variant="Variant.Text" ReadOnly=true Class="flex-grow-0 " />

                <MudTextField @bind-Value="_selectedProgram.Firmware.IdfVersion" Label="IDF version" Variant="Variant.Text" ReadOnly=true Class ="flex-grow-0 " />

                <MudText Class="mx-4 mt-4" Typo="Typo.h5">Send to module</MudText>
                <MudDivider Class="flex-grow-0 " />

                <div>
                    <MudSelect @bind-Value="_selectedModule" Variant="Variant.Outlined" Label="Module">
                        @if (_modules != null)
                        {
                            @foreach (var m in _modules)
                            {
                                <MudSelectItem Value="@m">@m.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </div>

                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SetOtaUpdate">
                    Send OTA Update
                </MudButton>

                <MudText Class="mx-4 mt-4" Typo="Typo.h5">Debug</MudText>
                <MudDivider Class="flex-grow-0 " />

                
                <MudSwitch @bind-Value="_showOutput">
                    Show Output
                </MudSwitch>

            </MudPaper>
        }
    </div>
</div>


<style>
    .monaco-editor-container {
        height: 100%;
    }
    .mud-tabs-panels{
        height: 100%;
    }

    .monaco-editor {
        position: absolute !important;
    }
</style>

@code
{
    [CascadingParameter]
    protected bool IsDarkMode { get; set; }

    private bool _showProgramsList = true;
    private bool _showProgramSettings = true;
    private bool _showOutput = false;

    private List<DbModuleProgram> _programs = [];
    private DbModuleProgram? _selectedProgram;

    private List<DbModule>? _modules;
    private DbModule? _selectedModule;

    private string _outputText = string.Empty;

    private MudTabs? _tabs;
    private int _activePanelIndex = 0;
    private StandaloneCodeEditor? _editor;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            _programs = await _moduleProgramService.GetProgramsListAsync();
            foreach(var p in _programs)
            {
                await p.LoadtProgramFiles();
            }
            _selectedProgram = _programs.FirstOrDefault();

            _modules = await _serverContextService.GetAllModulesAsync();
            _selectedModule = _modules?.FirstOrDefault();
            StateHasChanged();
        }
    }

    private async Task SelectedProgramChanged(DbModuleProgram program)
    {
        _tabs?.ActivatePanel(0);
        _selectedProgram = program;
        await UpdateEditorValue();
    }

    private async Task ActivePanelIndexChanged(int index)
    {
        if (_editor != null && _selectedProgram != null)
        {
            _selectedProgram.Files[_activePanelIndex].Content = await _editor.GetValue();
        }
        _activePanelIndex = index;
    }

    private async Task UpdateEditorValue()
    {
        if (_editor != null && _selectedProgram != null)
        {
            await _editor.SetValue(_selectedProgram.Files[_activePanelIndex].Content);
        }
    }

    private Func<StandaloneCodeEditor, StandaloneEditorConstructionOptions> CreateEditorConstructionOptions(DbModuleProgramFile file)
    {
        string language = Path.GetExtension(file.Name) switch
        {
            ".c" => "c",
            ".h" => "c",
            // ".cmake" => "cmake",
            _ => "plaintext"
        };

        return editor => new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Theme = IsDarkMode ? "vs-dark" : "vs-light",
                Language = language,
                Value = file.Content,
            };
    }

    private async Task CleanProgram()
    {
        _outputText = string.Empty;
        _showOutput = true;
        if (_selectedProgram != null)
        {
            _outputText = string.Empty;
            await _moduleprogramManager.CleanProgramAsync(_selectedProgram, OutputHandler);
        }
    }

    private async Task BuilProgram()
    {
        _outputText = string.Empty;
        _showOutput = true;
        if (_selectedProgram != null)
        {
            _outputText = string.Empty;
            await _moduleprogramManager.BuildProgramAsync(_selectedProgram, OutputHandler);
        }
    }

    private void AddNewProgram()
    {
        _navigationManager.NavigateTo("/programs/add");
    }

    // private async Task SaveNewProgram()
    // {
    //     if (_newProgramFirmware != null && _programs != null)
    //     {
    //         var newProgram = new DbModuleProgram
    //             {
    //                 Name = _newProgramName,
    //             };
    //         newProgram = await _moduleprogramManager.CreateNewProgram(newProgram);
    //         if (newProgram != null)
    //         {
    //             await newProgram.LoadtProgramFiles();
    //             _programs.Add(newProgram);
    //             _tabs?.ActivatePanel(0);
    //             _selectedProgram = newProgram;
    //         }
    //     }
    //     _showNewProgram = false;
    // }

    private async Task ReloadProgram()
    {
        if (_selectedProgram != null && _editor != null)
        {
            await _selectedProgram.LoadtProgramFiles();
            await UpdateEditorValue();
        }
    }

    private async Task DeleteProgram()
    {
        if (_selectedProgram != null && _programs != null)
        {
            await _moduleprogramManager.DeleteProgram(_selectedProgram);
            _programs.Remove(_selectedProgram);
            _selectedProgram = _programs.FirstOrDefault();
            _tabs?.ActivatePanel(0);
            await UpdateEditorValue();
        }
    }

    private async Task SaveProgram()
    {
        if (_selectedProgram != null && _editor != null)
        {
            _selectedProgram.Files[_activePanelIndex].Content = await _editor.GetValue();
            await _moduleprogramManager.SaveProgram(_selectedProgram);
        }
    }

    private void OutputHandler(object sendingProcess, DataReceivedEventArgs outLine)
    {
        if (!string.IsNullOrEmpty(outLine.Data))
        {
            _outputText += outLine.Data + "\n";
            InvokeAsync(StateHasChanged);
        }
    }

    private void SetOtaUpdate()
    {
        if (_selectedProgram != null && _selectedModule != null)
        {
            _serverContextService.SendToModule(_selectedModule.Id, "PerformOTA", _selectedProgram.Name);
        }
    }
}