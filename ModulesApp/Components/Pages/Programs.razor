@using BlazorMonaco.Editor
@using ModulesApp.Models
@using ModulesApp.Models.ModulesPrograms
@using ModulesApp.Services
@using ModulesApp.Services.Data
@using System.Diagnostics

@inject ModuleProgramManager _moduleprogramManager
@inject ModuleProgramService _moduleProgramService
@inject ContextService _serverContextService

@page "/programs"
@attribute [Authorize]

<PageTitle>Programs</PageTitle>

<MudGrid Spacing="0">
    <MudItem xs="12" sm="2">
        <MudStack Spacing="2">
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudText Typo="Typo.h4">Programs</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Primary" OnClick="AddNewProgram"/>
            </MudStack>
            <MudDivider />
            @if(_programs == null)
            {
                <MudProgressCircular Indeterminate="true" Color="@Color.Primary" />
            }
            else
            {
                <MudList T="DbModuleProgram"
                SelectedValue="@_selectedProgram"
                SelectedValueChanged="@SelectedProgramChanged">
                    @foreach (var p in _programs)
                    {
                        <MudListItem Value="@p" Text=@p.Name />
                    }
                </MudList>
            }
            <MudDivider />
        </MudStack>
    </MudItem>

    <MudItem xs="12" sm="10" Class="pl-4">
        @if(_isNewProgram)
        {
            <MudPaper Class="pa-6">
                <MudStack Class="pb-2" Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Size="Size.Large" OnClick="ToggleNewMode" />
                    <MudText Typo="Typo.h4">Add new</MudText>
                </MudStack>
                <MudDivider />

                <MudStack Class="pa-2" Spacing="4" AlignItems="AlignItems.Stretch" Justify="Justify.FlexStart">
                    <MudText Typo="Typo.h5">@_newProgramName</MudText>

                    <MudTextField Label="Program Name" @bind-Value="_newProgramName" Style="max-width: 300px" />
                    @if (_firmwares == null)
                    {
                        <MudProgressCircular Indeterminate="true" Color="@Color.Primary" />
                    }
                    else
                    {
                        <MudSelect @bind-Value="_newProgramFirmware" Label="Firmware" Style="max-width: 300px">
                            @foreach (var f in _firmwares)
                            {
                                <MudSelectItem Value="@f">@f.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <MudStack Spacing="2" Row="true">
                            <MudText Typo="Typo.body1">IDF version:</MudText>
                            <MudText Typo="Typo.body1">@_newProgramFirmware?.IDF.Name</MudText>
                        </MudStack>

                        <MudButton Style="max-width: 200px" Color="@Color.Primary" Variant="Variant.Filled"
                        OnClick="SaveNewProgram">
                            Save
                        </MudButton>
                    }
                </MudStack>
            </MudPaper>
        }
        else
        {
            <MudPaper Class="pa-4 mb-2">
                <MudStack Row="true" Wrap="Wrap.Wrap" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudText Typo="Typo.h5">
                        @_selectedProgram?.Name
                    </MudText>

                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        <MudStack Row="true">
                            <MudIconButton Icon="@Icons.Material.Outlined.Build" Color="@Color.Primary" OnClick="BuilProgram" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Wash" Color="@Color.Primary" OnClick="CleanProgram" />
                        </MudStack>
                        <MudStack Row="true">
                            <MudSelect @bind-Value="_selectedModule" Variant="Variant.Outlined">
                                @if (_modules != null)
                                {
                                    @foreach (var m in _modules)
                                    {
                                        <MudSelectItem Value="@m">@m.Name</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                            <MudIconButton Icon="@Icons.Material.Outlined.Send" Color="@Color.Primary" OnClick="SetOtaUpdate" />
                        </MudStack>
                    </MudStack>

                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        <MudIconButton Icon="@Icons.Material.Outlined.Save" Color="Color.Primary" OnClick="SaveProgram" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Secondary" OnClick="DeleteProgram" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Color="Color.Primary" OnClick="ReloadProgram" />
                    </MudStack>

                </MudStack>
            </MudPaper>

            <MudTabs KeepPanelsAlive="false" @ref=_tabs ActivePanelIndexChanged="ActivePanelIndexChanged">
                @if (_selectedProgram?.Files == null)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Style="height: 70vh;"/>
                }
                else
                {
                    @foreach (var f in _selectedProgram.Files)
                    {
                        <MudTabPanel Text="@f.Name" ShowCloseIcon=false>
                            <MudPaper>
                                <StandaloneCodeEditor @ref=_editor ConstructionOptions="CreateEditorConstructionOptions(f)" />
                            </MudPaper>
                        </MudTabPanel>
                    }
                }
            </MudTabs>
        }
    </MudItem>
        <MudItem xs="12" sm="12">
        <MudText Typo="Typo.h6">Output</MudText>
        <MudPaper Elevation="0">
            @foreach(var t in _outputList)
            {
                <div>@t</div>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

<style>
    .monaco-editor-container {
    height: 70vh;
    }
</style>

@code
{
    private List<DbModule>? _modules;
    private DbModule? _selectedModule;

    private List<DbModuleProgram>? _programs;
    private DbModuleProgram? _selectedProgram;

    private bool _isNewProgram;
    private string _newProgramName = string.Empty;
    private DbModuleFirmware? _newProgramFirmware;

    private List<DbModuleFirmware>? _firmwares;

    private string _outputText = string.Empty;
    private List<string> _outputList= [];

    private MudTabs? _tabs;
    private int _activePanelIndex = 0;
    private StandaloneCodeEditor? _editor;

    protected override async Task OnInitializedAsync()
    {
        _modules = await _serverContextService.GetAllModulesAsync();
        _selectedModule = _modules?.FirstOrDefault();
        _firmwares = await _moduleProgramService.GetFirmwareListAsync();
        _programs = await _moduleProgramService.GetProgramsListAsync();
        _selectedProgram = _programs.FirstOrDefault();
        _programs.ForEach(async p => await p.LoadtProgramFiles());
    }

    private async Task SelectedProgramChanged(DbModuleProgram program)
    {
        _tabs?.ActivatePanel(0);
        _selectedProgram = program;
        await UpdateEditorValue();
    }

    private async Task ActivePanelIndexChanged(int index)
    {
        if (_editor != null && _selectedProgram != null)
        {
            _selectedProgram.Files[_activePanelIndex].Content = await _editor.GetValue();
        }
        _activePanelIndex = index;
    }

    private async Task UpdateEditorValue()
    {
        if (_editor != null && _selectedProgram != null)
        {
            await _editor.SetValue(_selectedProgram.Files[_activePanelIndex].Content);
        }
    }

    private Func<StandaloneCodeEditor, StandaloneEditorConstructionOptions> CreateEditorConstructionOptions(DbModuleProgramFile file)
    {
        string language = Path.GetExtension(file.Name) switch
        {
            ".c" => "c",
            ".h" => "c",
            // ".cmake" => "cmake",
            _ => "plaintext"
        };

        return editor => new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = language,
                Value = file.Content
            };
    }

    private async Task CleanProgram()
    {
        if (_selectedProgram != null)
        {
            _outputText = string.Empty;
            await _moduleprogramManager.CleanProgramAsync(_selectedProgram, OutputHandler);
        }
    }

    private async Task BuilProgram()
    {
        if (_selectedProgram != null)
        {
            _outputText = string.Empty;
            await _moduleprogramManager.BuildProgramAsync(_selectedProgram, OutputHandler);
        }
    }

    private void AddNewProgram()
    {
        _newProgramName = "new_" + DateTime.Now.Millisecond;
        _newProgramFirmware = _firmwares?.FirstOrDefault();
        _isNewProgram = true;
    }

    private async Task SaveNewProgram()
    {
        if (_newProgramFirmware != null && _programs != null)
        {
            var newProgram = new DbModuleProgram
                {
                    Name = _newProgramName,
                };
            newProgram = await _moduleprogramManager.CreateNewProgram(newProgram, _newProgramFirmware);
            if (newProgram != null)
            {
                await newProgram.LoadtProgramFiles();
                _programs.Add(newProgram);
                _tabs?.ActivatePanel(0);
                _selectedProgram = newProgram;
            }
        }
        _isNewProgram = false;
    }

    private async Task ReloadProgram()
    {
        if (_selectedProgram != null && _editor != null)
        {
            await _selectedProgram.LoadtProgramFiles();
            await UpdateEditorValue();
        }
    }

    private async Task DeleteProgram()
    {
        if (_selectedProgram != null && _programs != null)
        {
            await _moduleprogramManager.DeleteProgram(_selectedProgram);
            _programs.Remove(_selectedProgram);
            _selectedProgram = _programs.FirstOrDefault();
            _tabs?.ActivatePanel(0);
            await UpdateEditorValue();
        }
    }

    private async Task SaveProgram()
    {
        if (_selectedProgram != null && _editor != null)
        {
            _selectedProgram.Files[_activePanelIndex].Content = await _editor.GetValue();
            await _moduleprogramManager.SaveProgram(_selectedProgram);
        }
    }

    private void OutputHandler(object sendingProcess, DataReceivedEventArgs outLine)
    {
        if (!string.IsNullOrEmpty(outLine.Data))
        {
            if (_outputList.Count > 4)
            {
                _outputList.RemoveAt(0);
            }
            _outputList.Add(outLine.Data);

            // _outputText += outLine.Data ;

            InvokeAsync(StateHasChanged);
        }
    }

    public void ToggleNewMode()
    {
        _isNewProgram = !_isNewProgram;
    }

    private void SetOtaUpdate()
    {
        if (_selectedProgram != null && _selectedModule != null)
        {
            _serverContextService.SendToModule(_selectedModule.Id, "PerformOTA", _selectedProgram.Name);
        }
    }
}