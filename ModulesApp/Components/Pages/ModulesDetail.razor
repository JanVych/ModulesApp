@using ModulesApp.Models
@using ModulesApp.Services
@using ModulesApp.Services.Data
@using System.Text.Json

@inject ActionService _actionService
@inject ModuleService _moduleService
@inject NavigationManager _navigationManager
@inject NotifyService _notifyService

@implements IDisposable

@page "/modules/detail"
@attribute [Authorize]

<PageTitle>Module Dteail</PageTitle>

<MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Size="Size.Large" OnClick="GoBack" />
        @if (_module is not null)
        {
            <MudText Typo="Typo.h4">@_module.Name</MudText>
        }
    </MudStack>

    <MudStack Row=true>
        <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Primary" Size="Size.Medium" OnClick="SaveModule"
                       Disabled="_hasError" />
        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" Size="Size.Medium" OnClick="DeleteModule" />
    </MudStack>

    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Large" OnClick="OnModulesChanged" />
</MudStack>

<MudDivider Class="mb-2" />

@if (_module == null)
{
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
}
else
{
    <MudStack Row="true" Wrap="Wrap.Wrap" Justify="Justify.SpaceEvenly" StretchItems="StretchItems.All">
        <MudPaper Class="pa-4" Elevation="0">
            <MudText Typo="Typo.h5">Module detail</MudText>
            <MudDivider Class="mt-2" />
            <MudSimpleTable Class="px-4 mb-2" Bordered="false" Elevation="0">
                <tbody>
                    <tr>
                        <td>Id</td>
                        <td>@_module.Id</td>
                    </tr>
                    <tr>
                        <td>Key</td>
                        <td>@_module?.Key</td>
                    </tr>
                    <tr>
                        <td>Name</td>
                        <td>
                            <MudTextField @bind-Value="_newModuleName" Variant="Variant.Text" Margin="Margin.Dense" Style="max-width:400px" />
                        </td>
                    </tr>
                    <tr>
                        <td>Communication interval</td>
                        <td>
                            <MudTextField @bind-Value="_newCommunicationInterval" Variant="Variant.Text" Margin="Margin.Dense" Style="max-width:400px" />
                        </td>
                    </tr>
                    <tr>
                        <td>Server address</td>
                        <td>
                            <MudTextField @bind-Value="_newServerAddress" Variant="Variant.Text" Margin="Margin.Dense" Style="max-width:400px" />
                        </td>
                    </tr>
                    <tr>
                        <td>Program</td>
                        <td>@_module?.ProgramName</td>
                    </tr>
                    <tr>
                        <td>Program status</td>
                        <td>@_module?.ProgramStatus</td>
                    </tr>
                    <tr>
                        <td>Chip name</td>
                        <td>@_module?.Chip</td>
                    </tr>
                    <tr>
                        <td>Firmware version</td>
                        <td>@_module?.FirmwareVersion</td>
                    </tr>
                    <tr>
                        <td>IDF version</td>
                        <td>@_module?.IDFVersion</td>
                    </tr>
                    <tr>
                        <td>Free heap</td>
                        <td>@_module?.FreeHeapText()</td>
                    </tr>
                    <tr>
                        <td>Wifi ssid</td>
                        <td>
                            <MudTextField @bind-Value="_newWifiSsid" Variant="Variant.Text" Margin="Margin.Dense" Style="max-width:400px" />
                        </td>
                    </tr>
                    <tr>
                        <td>Wifi password</td>
                        <td>
                            <MudTextField @bind-Value="_newWifiPassword" Variant="Variant.Text" Margin="Margin.Dense" Style="max-width:400px"
                                          Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="PasswordButtonCLick"
                                          AdornmentAriaLabel="Show Password" InputType="@_passwordInput" />
                        </td>
                    </tr>
                    <tr>
                        <td>Last Response</td>
                        <td>@_module?.LastResponse</td>
                    </tr>
                </tbody>
            </MudSimpleTable>
        </MudPaper>

        <MudPaper Class="pa-4" Elevation="0">
            <MudText Typo="Typo.h5">Message data</MudText>
            <MudDivider Class="mt-2" />
            <MudSimpleTable Class="px-4 mb-2" Bordered="false" Elevation="0">
                <tbody>
                    @foreach (var item in _module.Data)
                    {
                        <tr>
                            <td>@item.Key</td>
                            <td>@item.Value</td>
                            <td>@GenerateValueTypeText(item.Value)</td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        </MudPaper>

        <MudPaper Class="pa-4" Elevation="0">
            <MudText Typo="Typo.h5">Server tasks</MudText>
            <MudDivider Class="mt-2" />
            <MudSimpleTable Class="px-4 mb-2" Bordered="false" Elevation="0">
                <tbody>
                    @foreach (var item in _module.ServerTasks)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.Type</td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        </MudPaper>

        <MudPaper Class="pa-4" Elevation="0">
            <MudText Typo="Typo.h5">Pending actions</MudText>
            <MudDivider Class="mt-2" />
            <MudSimpleTable Class="px-4 mb-2" Bordered="false" Elevation="0">
                <tbody>
                    @foreach (var item in _module.Actions)
                    {
                        <tr>
                            <td>@item.Key</td>
                            <td>@item.Value</td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        </MudPaper>
    </MudStack>
}


@code
{
    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public long ModuleId { get; set; }

    private DbModule? _module;
    private string _serverAddress = string.Empty;

    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private string _newServerAddress = string.Empty;
    private string _newWifiPassword = string.Empty;
    private string _newWifiSsid = string.Empty;
    private string _newModuleName = string.Empty;
    private int _newCommunicationInterval = 5;

    InputType _passwordInput = InputType.Password;
    bool _isShow;

    private bool _hasError = false;

    protected override async Task OnInitializedAsync()
    {
        _serverAddress = _navigationManager.BaseUri
            .Replace("https://", string.Empty)
            .Replace("http://", string.Empty);

        _newServerAddress = _serverAddress;
        _notifyService.ModulesDbChangedEvent += OnModulesChanged;
        _module = await _moduleService.GetAsyncIncludeAll(ModuleId);
        if (_module != null)
        {
            _newModuleName = _module.Name;
            _newCommunicationInterval = _module.CommInterval;
            _newWifiSsid = _module.WifiSsid ?? string.Empty;
            _newWifiPassword = _module.WifiPassword ?? string.Empty;
        }
    }

    private async void OnModulesChanged()
    {
        _module?.Actions.Clear();
        _module = await _moduleService.GetAsyncIncludeAll(ModuleId);
        await InvokeAsync(StateHasChanged);
    }

    private void GoBack()
    {
        _navigationManager.NavigateTo("/modules");
    }

    private string GenerateValueTypeText(object value)
    {
        if (value is JsonElement jsonElement)
        {
            return jsonElement.ValueKind.ToString();
        }
        return value.GetType().Name;
    }

    private async Task SaveModule()
    {
        if (_module == null){
            return;
        }
        if (_newModuleName != _module.Name)
        {
            await _actionService.AddOrReplaceAsync("SetModuleName", _newModuleName, ModuleId, null);
            _module.Name = _newModuleName;
        }
        if (_newCommunicationInterval != _module.CommInterval)
        {
            await _actionService.AddOrReplaceAsync("SetCommInterval", _newCommunicationInterval, ModuleId, null);
            _module.CommInterval = _newCommunicationInterval;
        }
        if (_newServerAddress != _serverAddress)
        {
            await _actionService.AddOrReplaceAsync("SetServerAddress", _newServerAddress, ModuleId, null);
        }
        if (_newWifiSsid != _module.WifiSsid)
        {
            await _actionService.AddOrReplaceAsync("SetWifiSsid", _newWifiSsid, ModuleId, null);
            _module.WifiSsid = _newWifiSsid;
        }
        if (_newWifiPassword != _module.WifiPassword)
        {
            await _actionService.AddOrReplaceAsync("SetWifiPassword", _newWifiPassword, ModuleId, null);
            _module.WifiPassword = _newWifiPassword;
        }
        _module.Actions = [];
        await _moduleService.UpdateAsync(_module);
    }

    private async Task DeleteModule()
    {
        if (_module != null)
        {
            try
            {
                await _moduleService.DeleteAsync(_module);
                _navigationManager.NavigateTo("/modules");
            }
            catch (Exception ex)
            {

            }
        }
    }   

    void PasswordButtonCLick()
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    public void Dispose()
    {
        _notifyService.ModulesDbChangedEvent -= OnModulesChanged;
    }
}
