@using ModulesApp.Interfaces
@using ModulesApp.Models.ServerTasks
@using MudBlazor

<TaskNodeWidget Node="Node"
            Header="Send-Message">

    <MudSelect T="long"
               Modal=false
               ValueChanged="OnTypeChanged"
               Value="@Node.LongVal2"
               Variant="Variant.Outlined"
               Label="Target"
               Margin="Margin.Dense">
        <MudSelectItem Value="(long)TargetType.Module">@TargetType.Module</MudSelectItem>
        <MudSelectItem Value="(long)TargetType.Service">@TargetType.Service</MudSelectItem>
        <MudSelectItem Value="(long)TargetType.Dashboard">@TargetType.Dashboard</MudSelectItem>
    </MudSelect>

    @if (Node.LongVal2 == (long)TargetType.Module && Node.Modules != null)
    {
        <MudSelect T="long"
                   Modal=false
                   Style="max-width:180px"
                   @bind-Value="Node.LongVal1"
                   Variant="Variant.Outlined"
                   Label="Module"
                   Margin="Margin.Dense">
            @foreach (var m in Node.Modules)
            {
                <MudSelectItem Value="@m.Id">@m.Name</MudSelectItem>
            }
        </MudSelect>
        <MudTextField T="string"
                  @bind-Value="Node.StringVal1"
                  Label="Key"
                  Variant="Variant.Outlined"
                  Margin="Margin.Dense" />
    }
    else if (Node.LongVal2 == (long)TargetType.Service && Node.Services != null)
    {
        <MudSelect T="long"
                   Modal=false
                   Style="max-width:180px"
                   @bind-Value="Node.LongVal1"
                   Variant="Variant.Outlined"
                   Label="Service"
                   Margin="Margin.Dense">
            @foreach (var u in Node.Services)
            {
                <MudSelectItem Value="@u.Id">@u.Name</MudSelectItem>
            }
        </MudSelect>
        <MudTextField T="string"
                  @bind-Value="Node.StringVal1"
                  Label="Key"
                  Variant="Variant.Outlined"
                  Margin="Margin.Dense" />
    }
    else if (Node.LongVal2 == (long)TargetType.Dashboard && Node.Entities != null)
    {
        <MudSelect T="long"
                   Modal=false
                   Style="max-width:180px"
                   Value="Node.LongVal1"
                   ValueChanged="OnSourceChanged"
                   Variant="Variant.Outlined"
                   Label="Entity"
                   Margin="Margin.Dense">
            @foreach (var e in Node.Entities)
            {
                <MudSelectItem Value="@e.Id">@e.Name</MudSelectItem>
            }
        </MudSelect>
        <MudAutocomplete T="string"
                         @bind-Text="Node.StringVal1"
                         @bind-Value="Node.StringVal1"
                         Label="Key"
                         Style="max-width:180px"
                         Variant="Variant.Outlined"
                         Margin="Margin.Dense"
                         CoerceText=false
                         CoerceValue=false
                         Clearable=true
                         OnClearButtonClick="ClearButtonClick"
                         RelativeWidth="DropdownWidth.Adaptive"
                         Modal=false
                         Dense=false
                         SearchFunc="@Search"
                         AutoFocus="false">

        </MudAutocomplete>
    }
    <MudSwitch T="bool" ValueChanged="SwitchInputType" Size="Size.Small" Value="ToBool(Node.InputType)">
        @Node.InputType input
    </MudSwitch>

</TaskNodeWidget>

@code
{
    [Parameter]
    public SendMessageNode Node { get; set; } = null!;

    private async Task OnTypeChanged(long type)
    {
        if (type == (long)TargetType.Module)
        {
            Node.Modules ??= await Node._context.GetAllModulesAsync();
            Node.LongVal1 = Node.Modules.FirstOrDefault()?.Id ?? 0;
        }
        else if (type == (long)TargetType.Service)
        {
            Node.Services ??= await Node._context.GetAllBackgroundServicesAsync();
            Node.LongVal1 = Node.Services.FirstOrDefault()?.Id ?? 0;
        }
        else if (type == (long)TargetType.Dashboard)
        {
            Node.Entities ??= await Node._context.GetAllDashBoardEntitiesAsync();
            Node.LongVal1 = Node.Entities.FirstOrDefault()?.Id ?? 0;
        }
        Node.LongVal2 = type;
        Node.SetKeys();
    }

    private void OnSourceChanged(long value)
    {
        Node.LongVal1 = value;
        Node.SetKeys();
    }

    private void SwitchInputType(bool inputType)
    {
        if (inputType)
        {
            Node.AddPorts(NodeInputType.Double);
        }
        else
        {
            Node.AddPorts(NodeInputType.Single);
        }
    }

    private bool ToBool(NodeInputType type) => type == NodeInputType.Double;

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
        {
            return Node.Keys ?? [];
        }
        await Task.Delay(1, token);
        return Node.Keys?.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase)) ?? [];
    }

    private void ClearButtonClick()
    {
        Node.StringVal1 = string.Empty;
    }

}