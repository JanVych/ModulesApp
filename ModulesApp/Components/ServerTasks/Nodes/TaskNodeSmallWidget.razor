@using Blazor.Diagrams.Components.Renderers
@using Blazor.Diagrams.Core.Models
@using ModulesApp.Components.ServerTasks.Ports
@using ModulesApp.Interfaces
@using ModulesApp.Models.ServerTasks
@using MudBlazor

<div class="node">
    <MudStack Style="@GetBackgroundStyle()" Row=false AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="1">
        <MudStack Row=true Spacing="1">
            @if (!string.IsNullOrEmpty(_iconString))
            {
                <MudIcon Icon="@_iconString" Style="color: var(--mud-palette-surface);" />
            }
            <div class="node-header">@Header</div>
        </MudStack>

        @if (Node.ShowIdentifier)
        {
            <div class="node-header">Id: @Node.Order</div>
        }
    </MudStack>

    @foreach (TaskPort port in Node.Ports)
    {
        if (port.Input && port.PositionAlignment == PortPositionAlignment.Top)
        {
            <PortRenderer @key="port" Port="port" Class="diagram-port in top" Style="@GetPortStyle(port.DataType)" />
            <div class="port-text port-input port-top">@GetPortSymbol(port.DataType)</div>
        }

        else if (port.Input && port.PositionAlignment == PortPositionAlignment.Center)
        {
            <PortRenderer @key="port" Port="port" Class="diagram-port in middle" Style="@GetPortStyle(port.DataType)" />
            <div class="port-text port-input port-center">@GetPortSymbol(port.DataType)</div>
        }

        else if (port.Input && port.PositionAlignment == PortPositionAlignment.Bottom)
        {
            <PortRenderer @key="port" Port="port" Class="diagram-port in bottom" Style="@GetPortStyle(port.DataType)" />
            <div class="port-text port-input port-bottom">@GetPortSymbol(port.DataType)</div>
        }

        else if (!port.Input && port.PositionAlignment == PortPositionAlignment.Center)
        {
            <PortRenderer @key="port" Port="port" Class="diagram-port out middle" Style="@GetPortStyle(port.DataType)" />
            <div class="port-text port-output port-center">@GetPortSymbol(port.DataType)</div>
        }

        else if (!port.Input && port.PositionAlignment == PortPositionAlignment.Top)
        {
            <PortRenderer @key="port" Port="port" Class="diagram-port out top" Style="@GetPortStyle(port.DataType)" />
            <div class="port-text port-output port-top">@GetPortSymbol(port.DataType)</div>
        }

        else if (!port.Input && port.PositionAlignment == PortPositionAlignment.Bottom)
        {
            <PortRenderer @key="port" Port="port" Class="diagram-port out bottom" Style="@GetPortStyle(port.DataType)" />
            <div class="port-text port-output port-bottom">@GetPortSymbol(port.DataType)</div>
        }
    }
</div>

@code 
{
    [Parameter, EditorRequired]
    public TaskNode Node { get; set; } = null!;

    [Parameter, EditorRequired]
    public string Header { get; set; } = string.Empty;

    [Parameter]
    public int MinHeight { get; set; } = 60;


    private string _mainColor => TaskNode.GetNodeColorString(Node.Type);

    private string _iconString => TaskNode.GetNodeIconString(Node.Type);

    private string GetPortStyle(NodeValueType type)
    {
        if (type == NodeValueType.NoData)
        {
            return $"border-color: var({_mainColor});";
        }
        else
        {
            return $"background-color: var({_mainColor}); border-color: var({_mainColor});";
        }
    }

    private string GetBackgroundStyle() => $"background-color: var({_mainColor}); min-height: {MinHeight}px;";

    private string GetPortSymbol(NodeValueType dataPort)
    {
        return dataPort switch
        {
            NodeValueType.Boolean => "B",
            NodeValueType.Number => "N",
            NodeValueType.String => "S",
            NodeValueType.Array => "A",
            _ => ""
        };
    }
}