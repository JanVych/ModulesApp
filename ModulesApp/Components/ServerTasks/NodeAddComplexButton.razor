@using ModulesApp.Components.ServerTasks.Nodes
@using ModulesApp.Interfaces
@using ModulesApp.Models.ServerTasks

<MudButtonGroup Variant="Variant.Filled">
    <MudButton Style="@FullStyle"
               StartIcon="@TaskNode.GetNodeIconString(NodeType)"
               OnClick="@OnButtonClick">
        @NodeType.ToLongString()
    </MudButton>

    <MudMenu EndIcon="@Icons.Material.Filled.ArrowDropDown"
             Label="@GetTypeString(_subType)"
             Style="@Style"
             Class="custom-menu-label custom-menu-icon">
        @foreach (var item in Items)
        {
            <MudMenuItem Style="@FullStyle"
                         @onclick="() => ChangeType(item)">
                @GetTypeString(item)
            </MudMenuItem>
        }
    </MudMenu>
</MudButtonGroup>

<style>
    .custom-menu-icon .mud-icon-root {
        color: var(--mud-palette-surface);
    }

    .custom-menu-label .mud-button-label {
        color: var(--mud-palette-surface);
    }
</style>

@code
{
    [Parameter]
    [EditorRequired]
    public Action<NodeType, int> OnCLick { get; set; }

    [Parameter]
    [EditorRequired]
    public NodeType NodeType { get; set; }

    protected override void OnInitialized()
    {
        if(NodeType == NodeType.ConvertTo)
        {
            _subType = 1;
        }
    }

    private int _subType = 0;

    private List<int> Items => NodeType switch
    {
        NodeType.Condition => Enum.GetValues(typeof(NodeConditionType)).Cast<int>().ToList(),
        NodeType.ArrayOperation => Enum.GetValues(typeof(NodeArrayOperationType)).Cast<int>().ToList(),
        NodeType.ArithmeticOperation => Enum.GetValues(typeof(NodeArithmeticOperationType)).Cast<int>().ToList(),
        NodeType.ConvertTo => [(int)NodeValueType.String, (int)NodeValueType.Number, (int)NodeValueType.Boolean, (int)NodeValueType.Array],
        NodeType.BooleanOperation => Enum.GetValues(typeof(NodeBooleanOperationType)).Cast<int>().ToList(),
        _ => new List<int>()
    };

    private string Style => TaskNode.GertNodeButtonStyle(NodeType);
    private string FullStyle => $"{Style} color: var(--mud-palette-surface);";

    private string GetTypeString(int type)
    {
        return NodeType switch
        {
            NodeType.Condition => ((NodeConditionType)type).ToLongString(' '),
            NodeType.ArrayOperation => ((NodeArrayOperationType)type).ToLongString(' '),
            NodeType.ArithmeticOperation => ((NodeArithmeticOperationType)type).ToString(),
            NodeType.ConvertTo => ((NodeValueType)type).ToString(),
            NodeType.BooleanOperation => ((NodeBooleanOperationType)type).ToString(),
            _ => "Unknown"
        };
    }

    private void ChangeType(int type)
    {
        _subType = type;
    }

    private void OnButtonClick()
    {
        OnCLick?.Invoke(NodeType, _subType);
    }
}