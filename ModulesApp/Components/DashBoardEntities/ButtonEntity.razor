@using ModulesApp.Models.Dasboards
@using System.Text.Json
@using ModulesApp.Models.Dasboards.Entities
@using ModulesApp.Services

@if (EditMode)
{
    <MudPaper Class="pa-4" Style="width: 200px;">
        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="pa-2" Style="width: 150px;">
                <MudTextField @bind-Value="@Entity.Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
            </MudButton>
            @if (DeleteButtonClick != null)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="OnDeleteButtonClick" />
            }
        </MudStack>
    </MudPaper>
}
else
{
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="pa-2" Style="width: 150px;"
               Disabled="_disabled" OnClick="OnButtonClick">
        <MudText Typo="Typo.h6">@Entity.Name</MudText>
    </MudButton>
}

@code
{
    [Parameter, EditorRequired]
    public DbButtonEntity Entity { get; set; } = default!;
    [Parameter]
    public bool EditMode { get; set; } = false;
    [Parameter]
    public Action<DbDashboardEntity?>? DeleteButtonClick { get; set; }

    private bool _disabled = false;

    [Parameter]
    public ContextService? ServerContextService { get; set; }

    private void OnDeleteButtonClick()
    {
        DeleteButtonClick?.Invoke(Entity);
    }

    private async Task OnButtonClick()
    {
        if (ServerContextService != null)
        {
            _disabled = true;
            await ServerContextService.DashboardEntityUserTrigger(Entity);
            await Task.Delay(1000);
            _disabled = false;
        }
    }
}
