@using ModulesApp.Models.Dasboards
@using System.Text.Json
@using ModulesApp.Models.Dasboards.Entities

@if (EditMode)
{
    <MudPaper Class="pa-3" Style="width:300px;">
        <MudStack StretchItems="StretchItems.All" AlignItems="AlignItems.Stretch" Spacing="1">
            <MudStack Row="true">
                <MudTextField @bind-Value="@Entity.Name" Label="Id" Required=true />
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="OnDeleteButtonClick" />
            </MudStack>

            <MudDivider />
            <MudTextField @bind-Value="@Entity.Title" Label="Title" MaxLength="20" />
            <MudTextField @bind-Value="@Entity.Value" Label="Value" Disabled=true />
            <MudTextField @bind-Value="@Entity.Suffix" Label="Suffix" MaxLength="10" />

            <MudSelect T="string" @bind-value="Entity.Icon" Label="Icon">
                @foreach (string icon in _iconsList)
                {
                    <MudSelectItem Value="icon">
                        <MudIcon Icon="@icon" Size="Size.Medium" />
                    </MudSelectItem>
                }
            </MudSelect>

        </MudStack>
    </MudPaper>
}
else
{
    <MudPaper Class="pa-3" Style="width:300px; height:100px">
        <MudStack Justify="Justify.FlexStart" StretchItems="StretchItems.None" AlignItems="AlignItems.Center"
                  Class="overflow-hidden" Style="width:100%; height:100%" Spacing="2">
            <MudStack Row="true" AlignItems="AlignItems.Center">
                @if(!string.IsNullOrEmpty(Entity.Icon))
                {
                    <MudIcon Icon="@Entity.Icon" Color="Color.Primary" Size="Size.Medium" />                    
                }
                <MudText Typo="Typo.h5" Color="Color.Primary">@Entity.Title</MudText>
            </MudStack>

            <MudText Typo="Typo.h6">@Entity.Value @Entity.Suffix</MudText>

        </MudStack>
    </MudPaper>
}

@code
{
    [Parameter, EditorRequired]
    public DbKeyValueEntity Entity { get; set; } = default!;
    [Parameter]
    public bool EditMode { get; set; } = false;
    [Parameter]
    public Action<DbDashboardEntity?>? DeleteButtonClick { get; set; }

    private List<string> _iconsList = new()
    {
        Icons.Material.Filled.Thermostat,
        Icons.Material.Filled.DeviceThermostat,
        Icons.Material.Filled.EnergySavingsLeaf,
        Icons.Material.Filled.WaterDrop,
        Icons.Material.Filled.ElectricBolt,
        Icons.Material.Filled.SolarPower,
        Icons.Material.Filled.BatteryChargingFull,
        Icons.Material.Filled.Leaderboard,
        Icons.Material.Filled.LocalDrink,
        Icons.Material.Filled.PriceChange,
        Icons.Material.Filled.WbSunny,
        Icons.Material.Filled.HeatPump,
        Icons.Material.Filled.Fireplace,
        Icons.Material.Filled.Coronavirus,
        string.Empty
    };

    private void OnDeleteButtonClick()
    {
        DeleteButtonClick?.Invoke(Entity);
    }
}
