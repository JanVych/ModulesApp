@using ModulesApp.Models.Dasboards
@using System.Text.Json
@using ModulesApp.Models.Dasboards.Entities
@using ModulesApp.Services

@if (EditMode)
{
    <MudPaper Class="pa-3" Style="width:300px;">
        <MudStack StretchItems="StretchItems.All" AlignItems="AlignItems.Stretch" Spacing="1">
            <MudStack Row="true">
                <MudTextField @bind-Value="@Entity.Name" Label="Id" Required=true />
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="OnDeleteButtonClick" />
            </MudStack>

            <MudDivider />
            <MudTextField @bind-Value="@Entity.Title" Label="Title" MaxLength="20" />
            <MudTextField @bind-Value="@Entity.CurrentValue" Label="CurrentValue" Disabled=true />
            <MudTextField @bind-Value="@Entity.TargetValue" MaxLength="20" Label="TargetValue" Disabled=true />


        </MudStack>
    </MudPaper>
}
else
{
    <MudPaper Class="pa-3" Style="width:300px; height:208px">
        <MudStack Justify="Justify.Center" StretchItems="StretchItems.None" AlignItems="AlignItems.Stretch"
                  Class="overflow-hidden" Style="width:100%; height:100%" Spacing="2">
            <MudStack Row="true" AlignItems="AlignItems.Center">
                @* @if (!string.IsNullOrEmpty(Entity.Icon))
                {
                    <MudIcon Icon="@Entity.Icon" Color="Color.Primary" Size="Size.Medium" />
                } *@
                <MudText Typo="Typo.h5" Color="Color.Primary">@Entity.Title</MudText>
            </MudStack>

            <MudTextField @bind-Value="@Entity.CurrentValue" Label="Current" ReadOnly="true"/>
            <MudTextField @bind-Value="@Entity.TargetValue" MaxLength="20" Label="Target"/>

            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveChanges" Disabled="_saveDisabled">
                Save
            </MudButton>

        </MudStack>
    </MudPaper>
}

@code
{
    private bool _saveDisabled = false;

    [Parameter, EditorRequired]
    public DbValueSetterEntity Entity { get; set; } = default!;
    [Parameter]
    public bool EditMode { get; set; } = false;
    [Parameter]
    public Action<DbDashboardEntity?>? DeleteButtonClick { get; set; }
    [Parameter]
    public ContextService ServerContextService { get; set; } = default!;

    private void OnDeleteButtonClick()
    {
        DeleteButtonClick?.Invoke(Entity);
    }

    private async Task SaveChanges()
    {
        _saveDisabled = true;
        await ServerContextService.DashboardEntityUserTriggerAsync(Entity);
        await Task.Delay(500);
        _saveDisabled = false;
    }
}
